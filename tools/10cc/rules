# -----------------------------------------------------------------------------
#	C/C++ compiler
# -----------------------------------------------------------------------------

LD_BIN = ld
CP_BIN = cp

CC_BIN:=$(subst ",,$(CC_BIN))
CC_LIBS:=$(subst ",,$(CC_LIBS))
CC_OPT:=$(subst ",,$(CC_OPT))
# CC_INCLUDE_PATH:=$(subst ",,$(CC_INCLUDE_PATH))
# CC_LIBRARY_PATH:=$(subst ",,$(CC_LIBRARY_PATH))

CC_OPT_WARN:=$(subst ",,$(CC_OPT_WARN))
CC_OPT_DEBUG:=$(subst ",,$(CC_OPT_DEBUG))
CC_OPT_OPTIMIZE:=$(subst ",,$(CC_OPT_OPTIMIZE))
CC_OPT_TARGET:=$(subst ",,$(CC_OPT_TARGET))
CC_OPT_PIC:=$(subst ",,$(CC_OPT_PIC))

CXX_BIN:=$(subst ",,$(CXX_BIN))
CXX_LIBS:=$(subst ",,$(CXX_LIBS))
CXX_OPT:=$(subst ",,$(CXX_OPT))

# CXX_INCLUDE_PATH:=$(subst ",,$(CXX_INCLUDE_PATH))
# CXX_LIBRARY_PATH:=$(subst ",,$(CXX_LIBRARY_PATH))

#	common dependencies
#
source_c=$(wildcard *.c)
depend_c=$(patsubst %.c,.%.c.d,$(source_c))

source_S=$(wildcard *.S)
depend_S=$(patsubst %.S,.%.S.d,$(source_S))

source_cc=$(wildcard *.cc)
depend_cc=$(patsubst %.cc,.%.cc.d,$(source_cc))

depend.common: $(depend_c) $(depend_S) $(depend_cc)
	touch .depend

default.common:

#	cleanup need to be done before recursion
#
ifeq ($(MAKELEVEL),0)

GMAKE_CLEAN_INIT +="*.o" "*.oo" "*.s" "*.i" "*.ss" "*.ii"

endif

#	generated dependencies
#
ifeq ($(wildcard .depend),.depend)

FLAG_BUILD_DEPENDENCIES = 1
include .depend

ifneq ($(depend_c),)
-include $(depend_c)
endif

ifneq ($(depend_S),)
-include $(depend_S)
endif

ifneq ($(depend_cc),)
-include $(depend_cc)
endif

endif

