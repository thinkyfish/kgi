#	-----------------------------------------------------------------------
#	generic C/C++ compiler rules
#	-----------------------------------------------------------------------
#
#	These rules assume a compiler that recogninzes the following options
#	and shows the expected behaviour:
#
#	Compiler Options:
#
#		-o <file>	file to write output in (not for -E or -M)
#		-E		preprocess C/C++ and output result to *stdout*
#		-M		preprocess and output dependencies to *stdout*
#		-S		produce assembly code in file named with -o
#		-c		compile and put code in file named with -o	
#		-shared		produce shared library when linking
#		-I <dir> ...	search includes in <dir> too. (may be repeated)
#		-L <dir> ...	search libraries in <dir> too. (may be repeated)
#		-D<define>	add <define> to preprocessor variables
#		-l<lib>		link in library <lib>
#
#	The following file name conventions apply in addition to the general
#	rules:
#
#		.s	assembly code from C - generated upon request
#		.ss	assembly code from C++ - generated upon request
#		.i	preprocessed C - generated upon request
#		.ii	preprocessed C++ - generated upon request
#

#	default clean-up actions
#
ifeq ($(MAKELEVEL),0)

GMAKE_REALCLEAN_INIT += "*.s" "*.i" "*.ss" "*.ii"

endif

#	search paths
#
CC_INCLUDE_DIRS=$(patsubst %,-I % ,$(subst ",,$(CC_INCLUDE_PATH)))
CC_LIBRARY_DIRS=$(patsubst %,-L % ,$(subst ",,$(CC_LIBRARY_PATH)))

CXX_INCLUDE_DIRS=$(patsubst %,-I % ,$(subst ",,$(CXX_INCLUDE_PATH)))
CXX_LIBRARY_DIRS=$(patsubst %,-L % ,$(subst ",,$(CXX_LIBRARY_PATH)))

#	configuration defines
#
CC_OPT_CONFIG += -DHOST_OS=HOST_OS_$(HOST_OS) -DHOST_CPU=HOST_CPU_$(HOST_CPU)

#	the whole command line
#
CC = $(CC_BIN) $(CC_OPT_WARN) $(CC_OPT_DEBUG) $(CC_OPT_OPTIMIZE) $(CC_OPT_TARGET) $(CC_OPT_MACHINE) $(CC_OPT_CONFIG)
CXX = $(CXX_BIN) $(CC_OPT_WARN) $(CC_OPT_DEBUG) $(CC_OPT_OPTIMIZE) $(CC_OPT_TARGET) $(CC_OPT_MACHINE) $(CC_OPT_CONFIG)

#	C source
#
%: %.c
%: %.s
%: %.i
%: %.o

%.i: %.c

%.s: %.i
%.s: %.c

%.o: %.s
%.o: %.i
%.o: %.c

#	C rules to generate ...
#

#	... dependencies from source
.%.c.d: %.c
	$(CC) $(CC_OPT) $(CC_INCLUDE_DIRS) $(CFLAGS) -M $< | sed 's/$*\.o/$*\.o \.$*\.c\.d/' > $@


#	... preprocessor output from source
%.i: %.c
	$(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -E $< > $@


#	... assembler code from preprocessor output
%.s: %.i
	rm -f $@; $(CC) $(CFLAGS) -S $< -o $@

#	... assembler code from source
%.s: %.c
	rm -f $@; $(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -S $< -o $@


#	... object from assembler code
%.o: %.s
	$(CC) $(CFLAGS) -c $< -o $@

#	... object from preprocessor output
%.o: %.i
	$(CC) $(CC_OPT) $(CFLAGS) -c $< -o $@

#	... object from source
%.o: %.c
	$(CC) $(CC_OPT) $(CC_INCLUDE_DIRS) $(CFLAGS) -c $< -o $@


#	C Assembler
#
%.o: %.S
%: %.S

#	Assembler rules to generated ...
#

#	... dependencies from source code
.%.S.d: %.S
	$(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -M $< | sed 's/$*\.o/$*\.o \.$*\.S\.d/' > $@


#	... object from source code
%.o: %.S
	$(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -c $< -o $@


#	C++ source
#
%: %.cc
%: %.ss
%: %.ii
%: %.oo

%.ii: %.cc

%.ss: %.ii
%.ss: %.cc

%.oo: %.ss
%.oo: %.ii
%.oo: %.cc

#	C++ rules to generate ...
#

#	... dependencies from C++
.%.cc.d: %.cc
	$(CXX) $(CXX_INCLUDE_DIRS) $(CFLAGS) -M $< | sed 's/$*\.o/$*\.oo \.$*\.cc\.d/' > $@


#	... preprocessor output from source
%.ii: %.cc
	$(CXX) $(CXX_OPT) $(CXX_INCLUDE_DIRS) $(CFLAGS) -E $< > $@


#	... assembler code from preprocessor output
%.ss: %.ii
	rm -f $@; $(CXX) $(CFLAGS) -S $< -o $@

#	... assembler code from source
%.ss: %.cc
	rm -f $@; $(CXX) $(CXX_OPT) $(CXX_INCLUDE_DIRS) $(CFLAGS) -S $< -o $@


#	... object from assembler code
%.oo: %.ss
	$(CC) $(CFLAGS) -c $< -o $@

#	... object from preprocessd source
%.oo: %.ii
	$(CC) $(CFLAGS) -c $< -o $@

#	... object from source
%.oo: %.cc $(DEPEND_cc)
	$(CXX) $(CXX_OPT) $(CXX_INCLUDE_DIRS) $(CFLAGS) -c $< -o $@


#	C++ Assembler
#
%.oo: %.SS
%: %.SS

#	Assembler rules to generated ...
#

#	... dependencies from source code
.%.SS.d: %.SS
	$(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -M $< | sed 's/$*\.o/$*\.oo \.$*\.SS\.d/' > $@


#	... object from source code
%.oo: %.SS
	$(CC) $(CC_INCLUDE_DIRS) $(CFLAGS) -c $< -o $@


#	Linker
#

#	Linker rules

#	C shared library from objects
%.so: %.o
	$(CC) $(CC_LIBS) $(CC_LIBRARY_DIRS) $(CFLAGS) -shared $^ -o $@

#	C exectutable from objects
%: %.o
	$(CC) $(CC_LIBS) $(CC_LIBRARY_DIRS) $(CFLAGS) $^ -o $@


#	C++ shared library from objects
%.so: %.oo
	$(CXX) $(CXX_LIBS) $(CXX_LIBRARY_DIRS) $(CFLAGS) -shared $^ -o $@

#	C++ exectutable from objects
%: %.oo
	$(CXX) $(CXX_LIBS) $(CXX_LIBRARY_DIRS) $(CFLAGS) $^ -o $@

#
# -----------------------------------------------------------------------------
