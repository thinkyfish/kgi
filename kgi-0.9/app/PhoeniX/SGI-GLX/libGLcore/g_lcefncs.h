/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */
#ifndef __g_lcefncs_h_
#define __g_lcefncs_h_

/*
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
**
** http://oss.sgi.com/projects/FreeB
**
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
**
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/

#include "types.h"
#include "apimacro.h"


extern void GLAPI __glce_NewList( GLuint, GLenum);
extern void GLAPI __glce_EndList( void);
extern void GLAPI __glce_CallList( GLuint);
extern void GLAPI __glce_CallLists( GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glce_DeleteLists( GLuint, GLsizei);
extern GLuint GLAPI __glce_GenLists( GLsizei);
extern void GLAPI __glce_ListBase( GLuint);
extern void GLAPI __glce_Begin( GLenum);
extern void GLAPI __glce_Bitmap( GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
extern void GLAPI __glce_Color3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __glce_Color3bv( const GLbyte *);
extern void GLAPI __glce_Color3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Color3dv( const GLdouble *);
extern void GLAPI __glce_Color3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Color3fv( const GLfloat *);
extern void GLAPI __glce_Color3i( GLint, GLint, GLint);
extern void GLAPI __glce_Color3iv( const GLint *);
extern void GLAPI __glce_Color3s( GLshort, GLshort, GLshort);
extern void GLAPI __glce_Color3sv( const GLshort *);
extern void GLAPI __glce_Color3ub( GLubyte, GLubyte, GLubyte);
extern void GLAPI __glce_Color3ubv( const GLubyte *);
extern void GLAPI __glce_Color3ui( GLuint, GLuint, GLuint);
extern void GLAPI __glce_Color3uiv( const GLuint *);
extern void GLAPI __glce_Color3us( GLushort, GLushort, GLushort);
extern void GLAPI __glce_Color3usv( const GLushort *);
extern void GLAPI __glce_Color4b( GLbyte, GLbyte, GLbyte, GLbyte);
extern void GLAPI __glce_Color4bv( const GLbyte *);
extern void GLAPI __glce_Color4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Color4dv( const GLdouble *);
extern void GLAPI __glce_Color4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Color4fv( const GLfloat *);
extern void GLAPI __glce_Color4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glce_Color4iv( const GLint *);
extern void GLAPI __glce_Color4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_Color4sv( const GLshort *);
extern void GLAPI __glce_Color4ub( GLubyte, GLubyte, GLubyte, GLubyte);
extern void GLAPI __glce_Color4ubv( const GLubyte *);
extern void GLAPI __glce_Color4ui( GLuint, GLuint, GLuint, GLuint);
extern void GLAPI __glce_Color4uiv( const GLuint *);
extern void GLAPI __glce_Color4us( GLushort, GLushort, GLushort, GLushort);
extern void GLAPI __glce_Color4usv( const GLushort *);
extern void GLAPI __glce_EdgeFlag( GLboolean);
extern void GLAPI __glce_EdgeFlagv( const GLboolean *);
extern void GLAPI __glce_End( void);
extern void GLAPI __glce_Indexd( GLdouble);
extern void GLAPI __glce_Indexdv( const GLdouble *);
extern void GLAPI __glce_Indexf( GLfloat);
extern void GLAPI __glce_Indexfv( const GLfloat *);
extern void GLAPI __glce_Indexi( GLint);
extern void GLAPI __glce_Indexiv( const GLint *);
extern void GLAPI __glce_Indexs( GLshort);
extern void GLAPI __glce_Indexsv( const GLshort *);
extern void GLAPI __glce_Normal3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __glce_Normal3bv( const GLbyte *);
extern void GLAPI __glce_Normal3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Normal3dv( const GLdouble *);
extern void GLAPI __glce_Normal3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Normal3fv( const GLfloat *);
extern void GLAPI __glce_Normal3i( GLint, GLint, GLint);
extern void GLAPI __glce_Normal3iv( const GLint *);
extern void GLAPI __glce_Normal3s( GLshort, GLshort, GLshort);
extern void GLAPI __glce_Normal3sv( const GLshort *);
extern void GLAPI __glce_RasterPos2d( GLdouble, GLdouble);
extern void GLAPI __glce_RasterPos2dv( const GLdouble *);
extern void GLAPI __glce_RasterPos2f( GLfloat, GLfloat);
extern void GLAPI __glce_RasterPos2fv( const GLfloat *);
extern void GLAPI __glce_RasterPos2i( GLint, GLint);
extern void GLAPI __glce_RasterPos2iv( const GLint *);
extern void GLAPI __glce_RasterPos2s( GLshort, GLshort);
extern void GLAPI __glce_RasterPos2sv( const GLshort *);
extern void GLAPI __glce_RasterPos3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_RasterPos3dv( const GLdouble *);
extern void GLAPI __glce_RasterPos3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_RasterPos3fv( const GLfloat *);
extern void GLAPI __glce_RasterPos3i( GLint, GLint, GLint);
extern void GLAPI __glce_RasterPos3iv( const GLint *);
extern void GLAPI __glce_RasterPos3s( GLshort, GLshort, GLshort);
extern void GLAPI __glce_RasterPos3sv( const GLshort *);
extern void GLAPI __glce_RasterPos4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_RasterPos4dv( const GLdouble *);
extern void GLAPI __glce_RasterPos4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_RasterPos4fv( const GLfloat *);
extern void GLAPI __glce_RasterPos4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glce_RasterPos4iv( const GLint *);
extern void GLAPI __glce_RasterPos4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_RasterPos4sv( const GLshort *);
extern void GLAPI __glce_Rectd( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Rectdv( const GLdouble *, const GLdouble *);
extern void GLAPI __glce_Rectf( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Rectfv( const GLfloat *, const GLfloat *);
extern void GLAPI __glce_Recti( GLint, GLint, GLint, GLint);
extern void GLAPI __glce_Rectiv( const GLint *, const GLint *);
extern void GLAPI __glce_Rects( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_Rectsv( const GLshort *, const GLshort *);
extern void GLAPI __glce_TexCoord1d( GLdouble);
extern void GLAPI __glce_TexCoord1dv( const GLdouble *);
extern void GLAPI __glce_TexCoord1f( GLfloat);
extern void GLAPI __glce_TexCoord1fv( const GLfloat *);
extern void GLAPI __glce_TexCoord1i( GLint);
extern void GLAPI __glce_TexCoord1iv( const GLint *);
extern void GLAPI __glce_TexCoord1s( GLshort);
extern void GLAPI __glce_TexCoord1sv( const GLshort *);
extern void GLAPI __glce_TexCoord2d( GLdouble, GLdouble);
extern void GLAPI __glce_TexCoord2dv( const GLdouble *);
extern void GLAPI __glce_TexCoord2f( GLfloat, GLfloat);
extern void GLAPI __glce_TexCoord2fv( const GLfloat *);
extern void GLAPI __glce_TexCoord2i( GLint, GLint);
extern void GLAPI __glce_TexCoord2iv( const GLint *);
extern void GLAPI __glce_TexCoord2s( GLshort, GLshort);
extern void GLAPI __glce_TexCoord2sv( const GLshort *);
extern void GLAPI __glce_TexCoord3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_TexCoord3dv( const GLdouble *);
extern void GLAPI __glce_TexCoord3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_TexCoord3fv( const GLfloat *);
extern void GLAPI __glce_TexCoord3i( GLint, GLint, GLint);
extern void GLAPI __glce_TexCoord3iv( const GLint *);
extern void GLAPI __glce_TexCoord3s( GLshort, GLshort, GLshort);
extern void GLAPI __glce_TexCoord3sv( const GLshort *);
extern void GLAPI __glce_TexCoord4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_TexCoord4dv( const GLdouble *);
extern void GLAPI __glce_TexCoord4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_TexCoord4fv( const GLfloat *);
extern void GLAPI __glce_TexCoord4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glce_TexCoord4iv( const GLint *);
extern void GLAPI __glce_TexCoord4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_TexCoord4sv( const GLshort *);
extern void GLAPI __glce_Vertex2d( GLdouble, GLdouble);
extern void GLAPI __glce_Vertex2dv( const GLdouble *);
extern void GLAPI __glce_Vertex2f( GLfloat, GLfloat);
extern void GLAPI __glce_Vertex2fv( const GLfloat *);
extern void GLAPI __glce_Vertex2i( GLint, GLint);
extern void GLAPI __glce_Vertex2iv( const GLint *);
extern void GLAPI __glce_Vertex2s( GLshort, GLshort);
extern void GLAPI __glce_Vertex2sv( const GLshort *);
extern void GLAPI __glce_Vertex3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Vertex3dv( const GLdouble *);
extern void GLAPI __glce_Vertex3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Vertex3fv( const GLfloat *);
extern void GLAPI __glce_Vertex3i( GLint, GLint, GLint);
extern void GLAPI __glce_Vertex3iv( const GLint *);
extern void GLAPI __glce_Vertex3s( GLshort, GLshort, GLshort);
extern void GLAPI __glce_Vertex3sv( const GLshort *);
extern void GLAPI __glce_Vertex4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Vertex4dv( const GLdouble *);
extern void GLAPI __glce_Vertex4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Vertex4fv( const GLfloat *);
extern void GLAPI __glce_Vertex4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glce_Vertex4iv( const GLint *);
extern void GLAPI __glce_Vertex4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_Vertex4sv( const GLshort *);
extern void GLAPI __glce_ClipPlane( GLenum, const GLdouble *);
extern void GLAPI __glce_ColorMaterial( GLenum, GLenum);
extern void GLAPI __glce_CullFace( GLenum);
extern void GLAPI __glce_Fogf( GLenum, GLfloat);
extern void GLAPI __glce_Fogfv( GLenum, const GLfloat *);
extern void GLAPI __glce_Fogi( GLenum, GLint);
extern void GLAPI __glce_Fogiv( GLenum, const GLint *);
extern void GLAPI __glce_FrontFace( GLenum);
extern void GLAPI __glce_Hint( GLenum, GLenum);
extern void GLAPI __glce_Lightf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_Lightfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_Lighti( GLenum, GLenum, GLint);
extern void GLAPI __glce_Lightiv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_LightModelf( GLenum, GLfloat);
extern void GLAPI __glce_LightModelfv( GLenum, const GLfloat *);
extern void GLAPI __glce_LightModeli( GLenum, GLint);
extern void GLAPI __glce_LightModeliv( GLenum, const GLint *);
extern void GLAPI __glce_LineStipple( GLint, GLushort);
extern void GLAPI __glce_LineWidth( GLfloat);
extern void GLAPI __glce_Materialf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_Materialfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_Materiali( GLenum, GLenum, GLint);
extern void GLAPI __glce_Materialiv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_PointSize( GLfloat);
extern void GLAPI __glce_PolygonMode( GLenum, GLenum);
extern void GLAPI __glce_PolygonStipple( const GLubyte *);
extern void GLAPI __glce_Scissor( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glce_ShadeModel( GLenum);
extern void GLAPI __glce_TexParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_TexParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_TexParameteri( GLenum, GLenum, GLint);
extern void GLAPI __glce_TexParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_TexImage1D( GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_TexImage2D( GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_TexEnvf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_TexEnvfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_TexEnvi( GLenum, GLenum, GLint);
extern void GLAPI __glce_TexEnviv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_TexGend( GLenum, GLenum, GLdouble);
extern void GLAPI __glce_TexGendv( GLenum, GLenum, const GLdouble *);
extern void GLAPI __glce_TexGenf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_TexGenfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_TexGeni( GLenum, GLenum, GLint);
extern void GLAPI __glce_TexGeniv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_FeedbackBuffer( GLsizei, GLenum, GLfloat *);
extern void GLAPI __glce_SelectBuffer( GLsizei, GLuint *);
extern GLint GLAPI __glce_RenderMode( GLenum);
extern void GLAPI __glce_InitNames( void);
extern void GLAPI __glce_LoadName( GLuint);
extern void GLAPI __glce_PassThrough( GLfloat);
extern void GLAPI __glce_PopName( void);
extern void GLAPI __glce_PushName( GLuint);
extern void GLAPI __glce_DrawBuffer( GLenum);
extern void GLAPI __glce_Clear( GLbitfield);
extern void GLAPI __glce_ClearAccum( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_ClearIndex( GLfloat);
extern void GLAPI __glce_ClearColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __glce_ClearStencil( GLint);
extern void GLAPI __glce_ClearDepth( GLclampd);
extern void GLAPI __glce_StencilMask( GLuint);
extern void GLAPI __glce_ColorMask( GLboolean, GLboolean, GLboolean, GLboolean);
extern void GLAPI __glce_DepthMask( GLboolean);
extern void GLAPI __glce_IndexMask( GLuint);
extern void GLAPI __glce_Accum( GLenum, GLfloat);
extern void GLAPI __glce_Disable( GLenum);
extern void GLAPI __glce_Enable( GLenum);
extern void GLAPI __glce_Finish( void);
extern void GLAPI __glce_Flush( void);
extern void GLAPI __glce_PopAttrib( void);
extern void GLAPI __glce_PushAttrib( GLbitfield);
extern void GLAPI __glce_Map1d( GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __glce_Map1f( GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __glce_Map2d( GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __glce_Map2f( GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __glce_MapGrid1d( GLint, GLdouble, GLdouble);
extern void GLAPI __glce_MapGrid1f( GLint, GLfloat, GLfloat);
extern void GLAPI __glce_MapGrid2d( GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
extern void GLAPI __glce_MapGrid2f( GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
extern void GLAPI __glce_EvalCoord1d( GLdouble);
extern void GLAPI __glce_EvalCoord1dv( const GLdouble *);
extern void GLAPI __glce_EvalCoord1f( GLfloat);
extern void GLAPI __glce_EvalCoord1fv( const GLfloat *);
extern void GLAPI __glce_EvalCoord2d( GLdouble, GLdouble);
extern void GLAPI __glce_EvalCoord2dv( const GLdouble *);
extern void GLAPI __glce_EvalCoord2f( GLfloat, GLfloat);
extern void GLAPI __glce_EvalCoord2fv( const GLfloat *);
extern void GLAPI __glce_EvalMesh1( GLenum, GLint, GLint);
extern void GLAPI __glce_EvalPoint1( GLint);
extern void GLAPI __glce_EvalMesh2( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __glce_EvalPoint2( GLint, GLint);
extern void GLAPI __glce_AlphaFunc( GLenum, GLclampf);
extern void GLAPI __glce_BlendFunc( GLenum, GLenum);
extern void GLAPI __glce_LogicOp( GLenum);
extern void GLAPI __glce_StencilFunc( GLenum, GLint, GLuint);
extern void GLAPI __glce_StencilOp( GLenum, GLenum, GLenum);
extern void GLAPI __glce_DepthFunc( GLenum);
extern void GLAPI __glce_PixelZoom( GLfloat, GLfloat);
extern void GLAPI __glce_PixelTransferf( GLenum, GLfloat);
extern void GLAPI __glce_PixelTransferi( GLenum, GLint);
extern void GLAPI __glce_PixelStoref( GLenum, GLfloat);
extern void GLAPI __glce_PixelStorei( GLenum, GLint);
extern void GLAPI __glce_PixelMapfv( GLenum, GLint, const GLfloat *);
extern void GLAPI __glce_PixelMapuiv( GLenum, GLint, const GLuint *);
extern void GLAPI __glce_PixelMapusv( GLenum, GLint, const GLushort *);
extern void GLAPI __glce_ReadBuffer( GLenum);
extern void GLAPI __glce_CopyPixels( GLint, GLint, GLsizei, GLsizei, GLenum);
extern void GLAPI __glce_ReadPixels( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_DrawPixels( GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_GetBooleanv( GLenum, GLboolean *);
extern void GLAPI __glce_GetClipPlane( GLenum, GLdouble *);
extern void GLAPI __glce_GetDoublev( GLenum, GLdouble *);
extern GLenum GLAPI __glce_GetError( void);
extern void GLAPI __glce_GetFloatv( GLenum, GLfloat *);
extern void GLAPI __glce_GetIntegerv( GLenum, GLint *);
extern void GLAPI __glce_GetLightfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetLightiv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetMapdv( GLenum, GLenum, GLdouble *);
extern void GLAPI __glce_GetMapfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetMapiv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetMaterialfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetMaterialiv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetPixelMapfv( GLenum, GLfloat *);
extern void GLAPI __glce_GetPixelMapuiv( GLenum, GLuint *);
extern void GLAPI __glce_GetPixelMapusv( GLenum, GLushort *);
extern void GLAPI __glce_GetPolygonStipple( GLubyte *);
extern const GLubyte * GLAPI __glce_GetString( GLenum);
extern void GLAPI __glce_GetTexEnvfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetTexEnviv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetTexGendv( GLenum, GLenum, GLdouble *);
extern void GLAPI __glce_GetTexGenfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetTexGeniv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetTexImage( GLenum, GLint, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_GetTexParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetTexParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetTexLevelParameterfv( GLenum, GLint, GLenum, GLfloat *);
extern void GLAPI __glce_GetTexLevelParameteriv( GLenum, GLint, GLenum, GLint *);
extern GLboolean GLAPI __glce_IsEnabled( GLenum);
extern GLboolean GLAPI __glce_IsList( GLuint);
extern void GLAPI __glce_DepthRange( GLclampd, GLclampd);
extern void GLAPI __glce_Frustum( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_LoadIdentity( void);
extern void GLAPI __glce_LoadMatrixf( const GLfloat *);
extern void GLAPI __glce_LoadMatrixd( const GLdouble *);
extern void GLAPI __glce_MatrixMode( GLenum);
extern void GLAPI __glce_MultMatrixf( const GLfloat *);
extern void GLAPI __glce_MultMatrixd( const GLdouble *);
extern void GLAPI __glce_Ortho( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_PopMatrix( void);
extern void GLAPI __glce_PushMatrix( void);
extern void GLAPI __glce_Rotated( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Rotatef( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Scaled( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Scalef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Translated( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_Translatef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_Viewport( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glce_ArrayElement( GLint);
extern void GLAPI __glce_ColorPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_DisableClientState( GLenum);
extern void GLAPI __glce_DrawArrays( GLenum, GLint, GLsizei);
extern void GLAPI __glce_DrawElements( GLenum, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glce_EdgeFlagPointer( GLsizei, const GLboolean *);
extern void GLAPI __glce_EnableClientState( GLenum);
extern void GLAPI __glce_GetPointerv( GLenum, GLvoid* *);
extern void GLAPI __glce_IndexPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_InterleavedArrays( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_NormalPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_TexCoordPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_VertexPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glce_PolygonOffset( GLfloat, GLfloat);
extern void GLAPI __glce_CopyTexImage1D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
extern void GLAPI __glce_CopyTexImage2D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
extern void GLAPI __glce_CopyTexSubImage1D( GLenum, GLint, GLint, GLint, GLint, GLsizei);
extern void GLAPI __glce_CopyTexSubImage2D( GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glce_TexSubImage1D( GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_TexSubImage2D( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern GLboolean GLAPI __glce_AreTexturesResident( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __glce_BindTexture( GLenum, GLuint);
extern void GLAPI __glce_DeleteTextures( GLsizei, const GLuint *);
extern void GLAPI __glce_GenTextures( GLsizei, GLuint *);
extern GLboolean GLAPI __glce_IsTexture( GLuint);
extern void GLAPI __glce_PrioritizeTextures( GLsizei, const GLuint *, const GLclampf *);
extern void GLAPI __glce_Indexub( GLubyte);
extern void GLAPI __glce_Indexubv( const GLubyte *);
extern void GLAPI __glce_PopClientAttrib( void);
extern void GLAPI __glce_PushClientAttrib( GLbitfield);
extern void GLAPI __glce_BlendColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __glce_BlendEquation( GLenum);
extern void GLAPI __glce_DrawRangeElements( GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glce_ColorTable( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_ColorTableParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_ColorTableParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_CopyColorTable( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __glce_GetColorTable( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_GetColorTableParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetColorTableParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_ColorSubTable( GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_CopyColorSubTable( GLenum, GLsizei, GLint, GLint, GLsizei);
extern void GLAPI __glce_ConvolutionFilter1D( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_ConvolutionFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_ConvolutionParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __glce_ConvolutionParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glce_ConvolutionParameteri( GLenum, GLenum, GLint);
extern void GLAPI __glce_ConvolutionParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glce_CopyConvolutionFilter1D( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __glce_CopyConvolutionFilter2D( GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glce_GetConvolutionFilter( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_GetConvolutionParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetConvolutionParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetSeparableFilter( GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
extern void GLAPI __glce_SeparableFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
extern void GLAPI __glce_GetHistogram( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_GetHistogramParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetHistogramParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_GetMinmax( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __glce_GetMinmaxParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glce_GetMinmaxParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glce_Histogram( GLenum, GLsizei, GLenum, GLboolean);
extern void GLAPI __glce_Minmax( GLenum, GLenum, GLboolean);
extern void GLAPI __glce_ResetHistogram( GLenum);
extern void GLAPI __glce_ResetMinmax( GLenum);
extern void GLAPI __glce_TexImage3D( GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_TexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glce_CopyTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glce_ActiveTextureARB( GLenum);
extern void GLAPI __glce_ClientActiveTextureARB( GLenum);
extern void GLAPI __glce_MultiTexCoord1dARB( GLenum, GLdouble);
extern void GLAPI __glce_MultiTexCoord1dvARB( GLenum, const GLdouble *);
extern void GLAPI __glce_MultiTexCoord1fARB( GLenum, GLfloat);
extern void GLAPI __glce_MultiTexCoord1fvARB( GLenum, const GLfloat *);
extern void GLAPI __glce_MultiTexCoord1iARB( GLenum, GLint);
extern void GLAPI __glce_MultiTexCoord1ivARB( GLenum, const GLint *);
extern void GLAPI __glce_MultiTexCoord1sARB( GLenum, GLshort);
extern void GLAPI __glce_MultiTexCoord1svARB( GLenum, const GLshort *);
extern void GLAPI __glce_MultiTexCoord2dARB( GLenum, GLdouble, GLdouble);
extern void GLAPI __glce_MultiTexCoord2dvARB( GLenum, const GLdouble *);
extern void GLAPI __glce_MultiTexCoord2fARB( GLenum, GLfloat, GLfloat);
extern void GLAPI __glce_MultiTexCoord2fvARB( GLenum, const GLfloat *);
extern void GLAPI __glce_MultiTexCoord2iARB( GLenum, GLint, GLint);
extern void GLAPI __glce_MultiTexCoord2ivARB( GLenum, const GLint *);
extern void GLAPI __glce_MultiTexCoord2sARB( GLenum, GLshort, GLshort);
extern void GLAPI __glce_MultiTexCoord2svARB( GLenum, const GLshort *);
extern void GLAPI __glce_MultiTexCoord3dARB( GLenum, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_MultiTexCoord3dvARB( GLenum, const GLdouble *);
extern void GLAPI __glce_MultiTexCoord3fARB( GLenum, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_MultiTexCoord3fvARB( GLenum, const GLfloat *);
extern void GLAPI __glce_MultiTexCoord3iARB( GLenum, GLint, GLint, GLint);
extern void GLAPI __glce_MultiTexCoord3ivARB( GLenum, const GLint *);
extern void GLAPI __glce_MultiTexCoord3sARB( GLenum, GLshort, GLshort, GLshort);
extern void GLAPI __glce_MultiTexCoord3svARB( GLenum, const GLshort *);
extern void GLAPI __glce_MultiTexCoord4dARB( GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glce_MultiTexCoord4dvARB( GLenum, const GLdouble *);
extern void GLAPI __glce_MultiTexCoord4fARB( GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glce_MultiTexCoord4fvARB( GLenum, const GLfloat *);
extern void GLAPI __glce_MultiTexCoord4iARB( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __glce_MultiTexCoord4ivARB( GLenum, const GLint *);
extern void GLAPI __glce_MultiTexCoord4sARB( GLenum, GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glce_MultiTexCoord4svARB( GLenum, const GLshort *);
extern void GLAPI __glce_LockArraysEXT( GLint, GLsizei);
extern void GLAPI __glce_UnlockArraysEXT( void);
extern void GLAPI __glce_ArrayElementEXT( GLint);
extern void GLAPI __glce_ColorPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glce_EdgeFlagPointerEXT( GLsizei, GLsizei, const GLboolean *);
extern void GLAPI __glce_GetPointervEXT( GLenum, GLvoid* *);
extern void GLAPI __glce_IndexPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glce_NormalPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glce_TexCoordPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glce_VertexPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glce_DrawArraysEXT( GLenum, GLint, GLsizei);
extern GLboolean GLAPI __glce_AreTexturesResidentEXT( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __glce_DeleteTexturesEXT( GLsizei, const GLuint *);
extern void GLAPI __glce_GenTexturesEXT( GLsizei, GLuint *);
extern GLboolean GLAPI __glce_IsTextureEXT( GLuint);

#endif /* __g_lcefncs_h_ */
