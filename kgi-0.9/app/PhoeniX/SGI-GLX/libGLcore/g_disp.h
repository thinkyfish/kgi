/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */
#ifndef __g_disp_h_
#define __g_disp_h_

/*
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
**
** http://oss.sgi.com/projects/FreeB
**
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
**
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/

#if defined(i386)
#define SZPTR (32>>3)
#define SZINT 4
#endif

#if defined(mips)
#define SZPTR (_MIPS_SZPTR>>3)
#endif

#define __GL_TAB_NewList 0
#define __GL_TAB_EndList 1
#define __GL_TAB_CallList 2
#define __GL_TAB_CallLists 3
#define __GL_TAB_DeleteLists 4
#define __GL_TAB_GenLists 5
#define __GL_TAB_ListBase 6
#define __GL_TAB_Begin 7
#define __GL_TAB_Bitmap 8
#define __GL_TAB_Color3b 9
#define __GL_TAB_Color3bv 10
#define __GL_TAB_Color3d 11
#define __GL_TAB_Color3dv 12
#define __GL_TAB_Color3f 13
#define __GL_TAB_Color3fv 14
#define __GL_TAB_Color3i 15
#define __GL_TAB_Color3iv 16
#define __GL_TAB_Color3s 17
#define __GL_TAB_Color3sv 18
#define __GL_TAB_Color3ub 19
#define __GL_TAB_Color3ubv 20
#define __GL_TAB_Color3ui 21
#define __GL_TAB_Color3uiv 22
#define __GL_TAB_Color3us 23
#define __GL_TAB_Color3usv 24
#define __GL_TAB_Color4b 25
#define __GL_TAB_Color4bv 26
#define __GL_TAB_Color4d 27
#define __GL_TAB_Color4dv 28
#define __GL_TAB_Color4f 29
#define __GL_TAB_Color4fv 30
#define __GL_TAB_Color4i 31
#define __GL_TAB_Color4iv 32
#define __GL_TAB_Color4s 33
#define __GL_TAB_Color4sv 34
#define __GL_TAB_Color4ub 35
#define __GL_TAB_Color4ubv 36
#define __GL_TAB_Color4ui 37
#define __GL_TAB_Color4uiv 38
#define __GL_TAB_Color4us 39
#define __GL_TAB_Color4usv 40
#define __GL_TAB_EdgeFlag 41
#define __GL_TAB_EdgeFlagv 42
#define __GL_TAB_End 43
#define __GL_TAB_Indexd 44
#define __GL_TAB_Indexdv 45
#define __GL_TAB_Indexf 46
#define __GL_TAB_Indexfv 47
#define __GL_TAB_Indexi 48
#define __GL_TAB_Indexiv 49
#define __GL_TAB_Indexs 50
#define __GL_TAB_Indexsv 51
#define __GL_TAB_Normal3b 52
#define __GL_TAB_Normal3bv 53
#define __GL_TAB_Normal3d 54
#define __GL_TAB_Normal3dv 55
#define __GL_TAB_Normal3f 56
#define __GL_TAB_Normal3fv 57
#define __GL_TAB_Normal3i 58
#define __GL_TAB_Normal3iv 59
#define __GL_TAB_Normal3s 60
#define __GL_TAB_Normal3sv 61
#define __GL_TAB_RasterPos2d 62
#define __GL_TAB_RasterPos2dv 63
#define __GL_TAB_RasterPos2f 64
#define __GL_TAB_RasterPos2fv 65
#define __GL_TAB_RasterPos2i 66
#define __GL_TAB_RasterPos2iv 67
#define __GL_TAB_RasterPos2s 68
#define __GL_TAB_RasterPos2sv 69
#define __GL_TAB_RasterPos3d 70
#define __GL_TAB_RasterPos3dv 71
#define __GL_TAB_RasterPos3f 72
#define __GL_TAB_RasterPos3fv 73
#define __GL_TAB_RasterPos3i 74
#define __GL_TAB_RasterPos3iv 75
#define __GL_TAB_RasterPos3s 76
#define __GL_TAB_RasterPos3sv 77
#define __GL_TAB_RasterPos4d 78
#define __GL_TAB_RasterPos4dv 79
#define __GL_TAB_RasterPos4f 80
#define __GL_TAB_RasterPos4fv 81
#define __GL_TAB_RasterPos4i 82
#define __GL_TAB_RasterPos4iv 83
#define __GL_TAB_RasterPos4s 84
#define __GL_TAB_RasterPos4sv 85
#define __GL_TAB_Rectd 86
#define __GL_TAB_Rectdv 87
#define __GL_TAB_Rectf 88
#define __GL_TAB_Rectfv 89
#define __GL_TAB_Recti 90
#define __GL_TAB_Rectiv 91
#define __GL_TAB_Rects 92
#define __GL_TAB_Rectsv 93
#define __GL_TAB_TexCoord1d 94
#define __GL_TAB_TexCoord1dv 95
#define __GL_TAB_TexCoord1f 96
#define __GL_TAB_TexCoord1fv 97
#define __GL_TAB_TexCoord1i 98
#define __GL_TAB_TexCoord1iv 99
#define __GL_TAB_TexCoord1s 100
#define __GL_TAB_TexCoord1sv 101
#define __GL_TAB_TexCoord2d 102
#define __GL_TAB_TexCoord2dv 103
#define __GL_TAB_TexCoord2f 104
#define __GL_TAB_TexCoord2fv 105
#define __GL_TAB_TexCoord2i 106
#define __GL_TAB_TexCoord2iv 107
#define __GL_TAB_TexCoord2s 108
#define __GL_TAB_TexCoord2sv 109
#define __GL_TAB_TexCoord3d 110
#define __GL_TAB_TexCoord3dv 111
#define __GL_TAB_TexCoord3f 112
#define __GL_TAB_TexCoord3fv 113
#define __GL_TAB_TexCoord3i 114
#define __GL_TAB_TexCoord3iv 115
#define __GL_TAB_TexCoord3s 116
#define __GL_TAB_TexCoord3sv 117
#define __GL_TAB_TexCoord4d 118
#define __GL_TAB_TexCoord4dv 119
#define __GL_TAB_TexCoord4f 120
#define __GL_TAB_TexCoord4fv 121
#define __GL_TAB_TexCoord4i 122
#define __GL_TAB_TexCoord4iv 123
#define __GL_TAB_TexCoord4s 124
#define __GL_TAB_TexCoord4sv 125
#define __GL_TAB_Vertex2d 126
#define __GL_TAB_Vertex2dv 127
#define __GL_TAB_Vertex2f 128
#define __GL_TAB_Vertex2fv 129
#define __GL_TAB_Vertex2i 130
#define __GL_TAB_Vertex2iv 131
#define __GL_TAB_Vertex2s 132
#define __GL_TAB_Vertex2sv 133
#define __GL_TAB_Vertex3d 134
#define __GL_TAB_Vertex3dv 135
#define __GL_TAB_Vertex3f 136
#define __GL_TAB_Vertex3fv 137
#define __GL_TAB_Vertex3i 138
#define __GL_TAB_Vertex3iv 139
#define __GL_TAB_Vertex3s 140
#define __GL_TAB_Vertex3sv 141
#define __GL_TAB_Vertex4d 142
#define __GL_TAB_Vertex4dv 143
#define __GL_TAB_Vertex4f 144
#define __GL_TAB_Vertex4fv 145
#define __GL_TAB_Vertex4i 146
#define __GL_TAB_Vertex4iv 147
#define __GL_TAB_Vertex4s 148
#define __GL_TAB_Vertex4sv 149
#define __GL_TAB_ClipPlane 150
#define __GL_TAB_ColorMaterial 151
#define __GL_TAB_CullFace 152
#define __GL_TAB_Fogf 153
#define __GL_TAB_Fogfv 154
#define __GL_TAB_Fogi 155
#define __GL_TAB_Fogiv 156
#define __GL_TAB_FrontFace 157
#define __GL_TAB_Hint 158
#define __GL_TAB_Lightf 159
#define __GL_TAB_Lightfv 160
#define __GL_TAB_Lighti 161
#define __GL_TAB_Lightiv 162
#define __GL_TAB_LightModelf 163
#define __GL_TAB_LightModelfv 164
#define __GL_TAB_LightModeli 165
#define __GL_TAB_LightModeliv 166
#define __GL_TAB_LineStipple 167
#define __GL_TAB_LineWidth 168
#define __GL_TAB_Materialf 169
#define __GL_TAB_Materialfv 170
#define __GL_TAB_Materiali 171
#define __GL_TAB_Materialiv 172
#define __GL_TAB_PointSize 173
#define __GL_TAB_PolygonMode 174
#define __GL_TAB_PolygonStipple 175
#define __GL_TAB_Scissor 176
#define __GL_TAB_ShadeModel 177
#define __GL_TAB_TexParameterf 178
#define __GL_TAB_TexParameterfv 179
#define __GL_TAB_TexParameteri 180
#define __GL_TAB_TexParameteriv 181
#define __GL_TAB_TexImage1D 182
#define __GL_TAB_TexImage2D 183
#define __GL_TAB_TexEnvf 184
#define __GL_TAB_TexEnvfv 185
#define __GL_TAB_TexEnvi 186
#define __GL_TAB_TexEnviv 187
#define __GL_TAB_TexGend 188
#define __GL_TAB_TexGendv 189
#define __GL_TAB_TexGenf 190
#define __GL_TAB_TexGenfv 191
#define __GL_TAB_TexGeni 192
#define __GL_TAB_TexGeniv 193
#define __GL_TAB_FeedbackBuffer 194
#define __GL_TAB_SelectBuffer 195
#define __GL_TAB_RenderMode 196
#define __GL_TAB_InitNames 197
#define __GL_TAB_LoadName 198
#define __GL_TAB_PassThrough 199
#define __GL_TAB_PopName 200
#define __GL_TAB_PushName 201
#define __GL_TAB_DrawBuffer 202
#define __GL_TAB_Clear 203
#define __GL_TAB_ClearAccum 204
#define __GL_TAB_ClearIndex 205
#define __GL_TAB_ClearColor 206
#define __GL_TAB_ClearStencil 207
#define __GL_TAB_ClearDepth 208
#define __GL_TAB_StencilMask 209
#define __GL_TAB_ColorMask 210
#define __GL_TAB_DepthMask 211
#define __GL_TAB_IndexMask 212
#define __GL_TAB_Accum 213
#define __GL_TAB_Disable 214
#define __GL_TAB_Enable 215
#define __GL_TAB_Finish 216
#define __GL_TAB_Flush 217
#define __GL_TAB_PopAttrib 218
#define __GL_TAB_PushAttrib 219
#define __GL_TAB_Map1d 220
#define __GL_TAB_Map1f 221
#define __GL_TAB_Map2d 222
#define __GL_TAB_Map2f 223
#define __GL_TAB_MapGrid1d 224
#define __GL_TAB_MapGrid1f 225
#define __GL_TAB_MapGrid2d 226
#define __GL_TAB_MapGrid2f 227
#define __GL_TAB_EvalCoord1d 228
#define __GL_TAB_EvalCoord1dv 229
#define __GL_TAB_EvalCoord1f 230
#define __GL_TAB_EvalCoord1fv 231
#define __GL_TAB_EvalCoord2d 232
#define __GL_TAB_EvalCoord2dv 233
#define __GL_TAB_EvalCoord2f 234
#define __GL_TAB_EvalCoord2fv 235
#define __GL_TAB_EvalMesh1 236
#define __GL_TAB_EvalPoint1 237
#define __GL_TAB_EvalMesh2 238
#define __GL_TAB_EvalPoint2 239
#define __GL_TAB_AlphaFunc 240
#define __GL_TAB_BlendFunc 241
#define __GL_TAB_LogicOp 242
#define __GL_TAB_StencilFunc 243
#define __GL_TAB_StencilOp 244
#define __GL_TAB_DepthFunc 245
#define __GL_TAB_PixelZoom 246
#define __GL_TAB_PixelTransferf 247
#define __GL_TAB_PixelTransferi 248
#define __GL_TAB_PixelStoref 249
#define __GL_TAB_PixelStorei 250
#define __GL_TAB_PixelMapfv 251
#define __GL_TAB_PixelMapuiv 252
#define __GL_TAB_PixelMapusv 253
#define __GL_TAB_ReadBuffer 254
#define __GL_TAB_CopyPixels 255
#define __GL_TAB_ReadPixels 256
#define __GL_TAB_DrawPixels 257
#define __GL_TAB_GetBooleanv 258
#define __GL_TAB_GetClipPlane 259
#define __GL_TAB_GetDoublev 260
#define __GL_TAB_GetError 261
#define __GL_TAB_GetFloatv 262
#define __GL_TAB_GetIntegerv 263
#define __GL_TAB_GetLightfv 264
#define __GL_TAB_GetLightiv 265
#define __GL_TAB_GetMapdv 266
#define __GL_TAB_GetMapfv 267
#define __GL_TAB_GetMapiv 268
#define __GL_TAB_GetMaterialfv 269
#define __GL_TAB_GetMaterialiv 270
#define __GL_TAB_GetPixelMapfv 271
#define __GL_TAB_GetPixelMapuiv 272
#define __GL_TAB_GetPixelMapusv 273
#define __GL_TAB_GetPolygonStipple 274
#define __GL_TAB_GetString 275
#define __GL_TAB_GetTexEnvfv 276
#define __GL_TAB_GetTexEnviv 277
#define __GL_TAB_GetTexGendv 278
#define __GL_TAB_GetTexGenfv 279
#define __GL_TAB_GetTexGeniv 280
#define __GL_TAB_GetTexImage 281
#define __GL_TAB_GetTexParameterfv 282
#define __GL_TAB_GetTexParameteriv 283
#define __GL_TAB_GetTexLevelParameterfv 284
#define __GL_TAB_GetTexLevelParameteriv 285
#define __GL_TAB_IsEnabled 286
#define __GL_TAB_IsList 287
#define __GL_TAB_DepthRange 288
#define __GL_TAB_Frustum 289
#define __GL_TAB_LoadIdentity 290
#define __GL_TAB_LoadMatrixf 291
#define __GL_TAB_LoadMatrixd 292
#define __GL_TAB_MatrixMode 293
#define __GL_TAB_MultMatrixf 294
#define __GL_TAB_MultMatrixd 295
#define __GL_TAB_Ortho 296
#define __GL_TAB_PopMatrix 297
#define __GL_TAB_PushMatrix 298
#define __GL_TAB_Rotated 299
#define __GL_TAB_Rotatef 300
#define __GL_TAB_Scaled 301
#define __GL_TAB_Scalef 302
#define __GL_TAB_Translated 303
#define __GL_TAB_Translatef 304
#define __GL_TAB_Viewport 305
#define __GL_TAB_ArrayElement 306
#define __GL_TAB_ColorPointer 307
#define __GL_TAB_DisableClientState 308
#define __GL_TAB_DrawArrays 309
#define __GL_TAB_DrawElements 310
#define __GL_TAB_EdgeFlagPointer 311
#define __GL_TAB_EnableClientState 312
#define __GL_TAB_GetPointerv 313
#define __GL_TAB_IndexPointer 314
#define __GL_TAB_InterleavedArrays 315
#define __GL_TAB_NormalPointer 316
#define __GL_TAB_TexCoordPointer 317
#define __GL_TAB_VertexPointer 318
#define __GL_TAB_PolygonOffset 319
#define __GL_TAB_CopyTexImage1D 320
#define __GL_TAB_CopyTexImage2D 321
#define __GL_TAB_CopyTexSubImage1D 322
#define __GL_TAB_CopyTexSubImage2D 323
#define __GL_TAB_TexSubImage1D 324
#define __GL_TAB_TexSubImage2D 325
#define __GL_TAB_AreTexturesResident 326
#define __GL_TAB_BindTexture 327
#define __GL_TAB_DeleteTextures 328
#define __GL_TAB_GenTextures 329
#define __GL_TAB_IsTexture 330
#define __GL_TAB_PrioritizeTextures 331
#define __GL_TAB_Indexub 332
#define __GL_TAB_Indexubv 333
#define __GL_TAB_PopClientAttrib 334
#define __GL_TAB_PushClientAttrib 335
#define __GL_TAB_BlendColor 336
#define __GL_TAB_BlendEquation 337
#define __GL_TAB_DrawRangeElements 338
#define __GL_TAB_ColorTable 339
#define __GL_TAB_ColorTableParameterfv 340
#define __GL_TAB_ColorTableParameteriv 341
#define __GL_TAB_CopyColorTable 342
#define __GL_TAB_GetColorTable 343
#define __GL_TAB_GetColorTableParameterfv 344
#define __GL_TAB_GetColorTableParameteriv 345
#define __GL_TAB_ColorSubTable 346
#define __GL_TAB_CopyColorSubTable 347
#define __GL_TAB_ConvolutionFilter1D 348
#define __GL_TAB_ConvolutionFilter2D 349
#define __GL_TAB_ConvolutionParameterf 350
#define __GL_TAB_ConvolutionParameterfv 351
#define __GL_TAB_ConvolutionParameteri 352
#define __GL_TAB_ConvolutionParameteriv 353
#define __GL_TAB_CopyConvolutionFilter1D 354
#define __GL_TAB_CopyConvolutionFilter2D 355
#define __GL_TAB_GetConvolutionFilter 356
#define __GL_TAB_GetConvolutionParameterfv 357
#define __GL_TAB_GetConvolutionParameteriv 358
#define __GL_TAB_GetSeparableFilter 359
#define __GL_TAB_SeparableFilter2D 360
#define __GL_TAB_GetHistogram 361
#define __GL_TAB_GetHistogramParameterfv 362
#define __GL_TAB_GetHistogramParameteriv 363
#define __GL_TAB_GetMinmax 364
#define __GL_TAB_GetMinmaxParameterfv 365
#define __GL_TAB_GetMinmaxParameteriv 366
#define __GL_TAB_Histogram 367
#define __GL_TAB_Minmax 368
#define __GL_TAB_ResetHistogram 369
#define __GL_TAB_ResetMinmax 370
#define __GL_TAB_TexImage3D 371
#define __GL_TAB_TexSubImage3D 372
#define __GL_TAB_CopyTexSubImage3D 373
#define __GL_TAB_ActiveTextureARB 374
#define __GL_TAB_ClientActiveTextureARB 375
#define __GL_TAB_MultiTexCoord1dARB 376
#define __GL_TAB_MultiTexCoord1dvARB 377
#define __GL_TAB_MultiTexCoord1fARB 378
#define __GL_TAB_MultiTexCoord1fvARB 379
#define __GL_TAB_MultiTexCoord1iARB 380
#define __GL_TAB_MultiTexCoord1ivARB 381
#define __GL_TAB_MultiTexCoord1sARB 382
#define __GL_TAB_MultiTexCoord1svARB 383
#define __GL_TAB_MultiTexCoord2dARB 384
#define __GL_TAB_MultiTexCoord2dvARB 385
#define __GL_TAB_MultiTexCoord2fARB 386
#define __GL_TAB_MultiTexCoord2fvARB 387
#define __GL_TAB_MultiTexCoord2iARB 388
#define __GL_TAB_MultiTexCoord2ivARB 389
#define __GL_TAB_MultiTexCoord2sARB 390
#define __GL_TAB_MultiTexCoord2svARB 391
#define __GL_TAB_MultiTexCoord3dARB 392
#define __GL_TAB_MultiTexCoord3dvARB 393
#define __GL_TAB_MultiTexCoord3fARB 394
#define __GL_TAB_MultiTexCoord3fvARB 395
#define __GL_TAB_MultiTexCoord3iARB 396
#define __GL_TAB_MultiTexCoord3ivARB 397
#define __GL_TAB_MultiTexCoord3sARB 398
#define __GL_TAB_MultiTexCoord3svARB 399
#define __GL_TAB_MultiTexCoord4dARB 400
#define __GL_TAB_MultiTexCoord4dvARB 401
#define __GL_TAB_MultiTexCoord4fARB 402
#define __GL_TAB_MultiTexCoord4fvARB 403
#define __GL_TAB_MultiTexCoord4iARB 404
#define __GL_TAB_MultiTexCoord4ivARB 405
#define __GL_TAB_MultiTexCoord4sARB 406
#define __GL_TAB_MultiTexCoord4svARB 407
#define __GL_TAB_LockArraysEXT 408
#define __GL_TAB_UnlockArraysEXT 409
#define __GL_TAB_ArrayElementEXT 410
#define __GL_TAB_ColorPointerEXT 411
#define __GL_TAB_EdgeFlagPointerEXT 412
#define __GL_TAB_GetPointervEXT 413
#define __GL_TAB_IndexPointerEXT 414
#define __GL_TAB_NormalPointerEXT 415
#define __GL_TAB_TexCoordPointerEXT 416
#define __GL_TAB_VertexPointerEXT 417
#define __GL_TAB_DrawArraysEXT 418
#define __GL_TAB_AreTexturesResidentEXT 419
#define __GL_TAB_DeleteTexturesEXT 420
#define __GL_TAB_GenTexturesEXT 421
#define __GL_TAB_IsTextureEXT 422
#define __GL_TAB_SIZE (423*SZPTR)
#define __GL_TAB_ENTRIES 423

#define __GL_DISPATCHSTATE_SIZE (438*SZPTR+8)

#if defined(_LANGUAGE_C) || defined(__cplusplus)
struct __GLdispatchTableRec {
    void (GLAPI*NewList)(GLuint, GLenum);
    void (GLAPI*EndList)(void);
    void (GLAPI*CallList)(GLuint);
    void (GLAPI*CallLists)(GLsizei, GLenum, const GLvoid *);
    void (GLAPI*DeleteLists)(GLuint, GLsizei);
    GLuint (GLAPI*GenLists)(GLsizei);
    void (GLAPI*ListBase)(GLuint);
    void (GLAPI*Begin)(GLenum);
    void (GLAPI*Bitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (GLAPI*Color3b)(GLbyte, GLbyte, GLbyte);
    void (GLAPI*Color3bv)(const GLbyte *);
    void (GLAPI*Color3d)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*Color3dv)(const GLdouble *);
    void (GLAPI*Color3f)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*Color3fv)(const GLfloat *);
    void (GLAPI*Color3i)(GLint, GLint, GLint);
    void (GLAPI*Color3iv)(const GLint *);
    void (GLAPI*Color3s)(GLshort, GLshort, GLshort);
    void (GLAPI*Color3sv)(const GLshort *);
    void (GLAPI*Color3ub)(GLubyte, GLubyte, GLubyte);
    void (GLAPI*Color3ubv)(const GLubyte *);
    void (GLAPI*Color3ui)(GLuint, GLuint, GLuint);
    void (GLAPI*Color3uiv)(const GLuint *);
    void (GLAPI*Color3us)(GLushort, GLushort, GLushort);
    void (GLAPI*Color3usv)(const GLushort *);
    void (GLAPI*Color4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (GLAPI*Color4bv)(const GLbyte *);
    void (GLAPI*Color4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*Color4dv)(const GLdouble *);
    void (GLAPI*Color4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*Color4fv)(const GLfloat *);
    void (GLAPI*Color4i)(GLint, GLint, GLint, GLint);
    void (GLAPI*Color4iv)(const GLint *);
    void (GLAPI*Color4s)(GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*Color4sv)(const GLshort *);
    void (GLAPI*Color4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (GLAPI*Color4ubv)(const GLubyte *);
    void (GLAPI*Color4ui)(GLuint, GLuint, GLuint, GLuint);
    void (GLAPI*Color4uiv)(const GLuint *);
    void (GLAPI*Color4us)(GLushort, GLushort, GLushort, GLushort);
    void (GLAPI*Color4usv)(const GLushort *);
    void (GLAPI*EdgeFlag)(GLboolean);
    void (GLAPI*EdgeFlagv)(const GLboolean *);
    void (GLAPI*End)(void);
    void (GLAPI*Indexd)(GLdouble);
    void (GLAPI*Indexdv)(const GLdouble *);
    void (GLAPI*Indexf)(GLfloat);
    void (GLAPI*Indexfv)(const GLfloat *);
    void (GLAPI*Indexi)(GLint);
    void (GLAPI*Indexiv)(const GLint *);
    void (GLAPI*Indexs)(GLshort);
    void (GLAPI*Indexsv)(const GLshort *);
    void (GLAPI*Normal3b)(GLbyte, GLbyte, GLbyte);
    void (GLAPI*Normal3bv)(const GLbyte *);
    void (GLAPI*Normal3d)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*Normal3dv)(const GLdouble *);
    void (GLAPI*Normal3f)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*Normal3fv)(const GLfloat *);
    void (GLAPI*Normal3i)(GLint, GLint, GLint);
    void (GLAPI*Normal3iv)(const GLint *);
    void (GLAPI*Normal3s)(GLshort, GLshort, GLshort);
    void (GLAPI*Normal3sv)(const GLshort *);
    void (GLAPI*RasterPos2d)(GLdouble, GLdouble);
    void (GLAPI*RasterPos2dv)(const GLdouble *);
    void (GLAPI*RasterPos2f)(GLfloat, GLfloat);
    void (GLAPI*RasterPos2fv)(const GLfloat *);
    void (GLAPI*RasterPos2i)(GLint, GLint);
    void (GLAPI*RasterPos2iv)(const GLint *);
    void (GLAPI*RasterPos2s)(GLshort, GLshort);
    void (GLAPI*RasterPos2sv)(const GLshort *);
    void (GLAPI*RasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*RasterPos3dv)(const GLdouble *);
    void (GLAPI*RasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*RasterPos3fv)(const GLfloat *);
    void (GLAPI*RasterPos3i)(GLint, GLint, GLint);
    void (GLAPI*RasterPos3iv)(const GLint *);
    void (GLAPI*RasterPos3s)(GLshort, GLshort, GLshort);
    void (GLAPI*RasterPos3sv)(const GLshort *);
    void (GLAPI*RasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*RasterPos4dv)(const GLdouble *);
    void (GLAPI*RasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*RasterPos4fv)(const GLfloat *);
    void (GLAPI*RasterPos4i)(GLint, GLint, GLint, GLint);
    void (GLAPI*RasterPos4iv)(const GLint *);
    void (GLAPI*RasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*RasterPos4sv)(const GLshort *);
    void (GLAPI*Rectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*Rectdv)(const GLdouble *, const GLdouble *);
    void (GLAPI*Rectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*Rectfv)(const GLfloat *, const GLfloat *);
    void (GLAPI*Recti)(GLint, GLint, GLint, GLint);
    void (GLAPI*Rectiv)(const GLint *, const GLint *);
    void (GLAPI*Rects)(GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*Rectsv)(const GLshort *, const GLshort *);
    void (GLAPI*TexCoord1d)(GLdouble);
    void (GLAPI*TexCoord1dv)(const GLdouble *);
    void (GLAPI*TexCoord1f)(GLfloat);
    void (GLAPI*TexCoord1fv)(const GLfloat *);
    void (GLAPI*TexCoord1i)(GLint);
    void (GLAPI*TexCoord1iv)(const GLint *);
    void (GLAPI*TexCoord1s)(GLshort);
    void (GLAPI*TexCoord1sv)(const GLshort *);
    void (GLAPI*TexCoord2d)(GLdouble, GLdouble);
    void (GLAPI*TexCoord2dv)(const GLdouble *);
    void (GLAPI*TexCoord2f)(GLfloat, GLfloat);
    void (GLAPI*TexCoord2fv)(const GLfloat *);
    void (GLAPI*TexCoord2i)(GLint, GLint);
    void (GLAPI*TexCoord2iv)(const GLint *);
    void (GLAPI*TexCoord2s)(GLshort, GLshort);
    void (GLAPI*TexCoord2sv)(const GLshort *);
    void (GLAPI*TexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*TexCoord3dv)(const GLdouble *);
    void (GLAPI*TexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*TexCoord3fv)(const GLfloat *);
    void (GLAPI*TexCoord3i)(GLint, GLint, GLint);
    void (GLAPI*TexCoord3iv)(const GLint *);
    void (GLAPI*TexCoord3s)(GLshort, GLshort, GLshort);
    void (GLAPI*TexCoord3sv)(const GLshort *);
    void (GLAPI*TexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*TexCoord4dv)(const GLdouble *);
    void (GLAPI*TexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*TexCoord4fv)(const GLfloat *);
    void (GLAPI*TexCoord4i)(GLint, GLint, GLint, GLint);
    void (GLAPI*TexCoord4iv)(const GLint *);
    void (GLAPI*TexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*TexCoord4sv)(const GLshort *);
    void (GLAPI*Vertex2d)(GLdouble, GLdouble);
    void (GLAPI*Vertex2dv)(const GLdouble *);
    void (GLAPI*Vertex2f)(GLfloat, GLfloat);
    void (GLAPI*Vertex2fv)(const GLfloat *);
    void (GLAPI*Vertex2i)(GLint, GLint);
    void (GLAPI*Vertex2iv)(const GLint *);
    void (GLAPI*Vertex2s)(GLshort, GLshort);
    void (GLAPI*Vertex2sv)(const GLshort *);
    void (GLAPI*Vertex3d)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*Vertex3dv)(const GLdouble *);
    void (GLAPI*Vertex3f)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*Vertex3fv)(const GLfloat *);
    void (GLAPI*Vertex3i)(GLint, GLint, GLint);
    void (GLAPI*Vertex3iv)(const GLint *);
    void (GLAPI*Vertex3s)(GLshort, GLshort, GLshort);
    void (GLAPI*Vertex3sv)(const GLshort *);
    void (GLAPI*Vertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*Vertex4dv)(const GLdouble *);
    void (GLAPI*Vertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*Vertex4fv)(const GLfloat *);
    void (GLAPI*Vertex4i)(GLint, GLint, GLint, GLint);
    void (GLAPI*Vertex4iv)(const GLint *);
    void (GLAPI*Vertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*Vertex4sv)(const GLshort *);
    void (GLAPI*ClipPlane)(GLenum, const GLdouble *);
    void (GLAPI*ColorMaterial)(GLenum, GLenum);
    void (GLAPI*CullFace)(GLenum);
    void (GLAPI*Fogf)(GLenum, GLfloat);
    void (GLAPI*Fogfv)(GLenum, const GLfloat *);
    void (GLAPI*Fogi)(GLenum, GLint);
    void (GLAPI*Fogiv)(GLenum, const GLint *);
    void (GLAPI*FrontFace)(GLenum);
    void (GLAPI*Hint)(GLenum, GLenum);
    void (GLAPI*Lightf)(GLenum, GLenum, GLfloat);
    void (GLAPI*Lightfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*Lighti)(GLenum, GLenum, GLint);
    void (GLAPI*Lightiv)(GLenum, GLenum, const GLint *);
    void (GLAPI*LightModelf)(GLenum, GLfloat);
    void (GLAPI*LightModelfv)(GLenum, const GLfloat *);
    void (GLAPI*LightModeli)(GLenum, GLint);
    void (GLAPI*LightModeliv)(GLenum, const GLint *);
    void (GLAPI*LineStipple)(GLint, GLushort);
    void (GLAPI*LineWidth)(GLfloat);
    void (GLAPI*Materialf)(GLenum, GLenum, GLfloat);
    void (GLAPI*Materialfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*Materiali)(GLenum, GLenum, GLint);
    void (GLAPI*Materialiv)(GLenum, GLenum, const GLint *);
    void (GLAPI*PointSize)(GLfloat);
    void (GLAPI*PolygonMode)(GLenum, GLenum);
    void (GLAPI*PolygonStipple)(const GLubyte *);
    void (GLAPI*Scissor)(GLint, GLint, GLsizei, GLsizei);
    void (GLAPI*ShadeModel)(GLenum);
    void (GLAPI*TexParameterf)(GLenum, GLenum, GLfloat);
    void (GLAPI*TexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*TexParameteri)(GLenum, GLenum, GLint);
    void (GLAPI*TexParameteriv)(GLenum, GLenum, const GLint *);
    void (GLAPI*TexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
    void (GLAPI*TexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
    void (GLAPI*TexEnvf)(GLenum, GLenum, GLfloat);
    void (GLAPI*TexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*TexEnvi)(GLenum, GLenum, GLint);
    void (GLAPI*TexEnviv)(GLenum, GLenum, const GLint *);
    void (GLAPI*TexGend)(GLenum, GLenum, GLdouble);
    void (GLAPI*TexGendv)(GLenum, GLenum, const GLdouble *);
    void (GLAPI*TexGenf)(GLenum, GLenum, GLfloat);
    void (GLAPI*TexGenfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*TexGeni)(GLenum, GLenum, GLint);
    void (GLAPI*TexGeniv)(GLenum, GLenum, const GLint *);
    void (GLAPI*FeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (GLAPI*SelectBuffer)(GLsizei, GLuint *);
    GLint (GLAPI*RenderMode)(GLenum);
    void (GLAPI*InitNames)(void);
    void (GLAPI*LoadName)(GLuint);
    void (GLAPI*PassThrough)(GLfloat);
    void (GLAPI*PopName)(void);
    void (GLAPI*PushName)(GLuint);
    void (GLAPI*DrawBuffer)(GLenum);
    void (GLAPI*Clear)(GLbitfield);
    void (GLAPI*ClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*ClearIndex)(GLfloat);
    void (GLAPI*ClearColor)(GLclampf, GLclampf, GLclampf, GLclampf);
    void (GLAPI*ClearStencil)(GLint);
    void (GLAPI*ClearDepth)(GLclampd);
    void (GLAPI*StencilMask)(GLuint);
    void (GLAPI*ColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (GLAPI*DepthMask)(GLboolean);
    void (GLAPI*IndexMask)(GLuint);
    void (GLAPI*Accum)(GLenum, GLfloat);
    void (GLAPI*Disable)(GLenum);
    void (GLAPI*Enable)(GLenum);
    void (GLAPI*Finish)(void);
    void (GLAPI*Flush)(void);
    void (GLAPI*PopAttrib)(void);
    void (GLAPI*PushAttrib)(GLbitfield);
    void (GLAPI*Map1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (GLAPI*Map1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (GLAPI*Map2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (GLAPI*Map2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (GLAPI*MapGrid1d)(GLint, GLdouble, GLdouble);
    void (GLAPI*MapGrid1f)(GLint, GLfloat, GLfloat);
    void (GLAPI*MapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (GLAPI*MapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (GLAPI*EvalCoord1d)(GLdouble);
    void (GLAPI*EvalCoord1dv)(const GLdouble *);
    void (GLAPI*EvalCoord1f)(GLfloat);
    void (GLAPI*EvalCoord1fv)(const GLfloat *);
    void (GLAPI*EvalCoord2d)(GLdouble, GLdouble);
    void (GLAPI*EvalCoord2dv)(const GLdouble *);
    void (GLAPI*EvalCoord2f)(GLfloat, GLfloat);
    void (GLAPI*EvalCoord2fv)(const GLfloat *);
    void (GLAPI*EvalMesh1)(GLenum, GLint, GLint);
    void (GLAPI*EvalPoint1)(GLint);
    void (GLAPI*EvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (GLAPI*EvalPoint2)(GLint, GLint);
    void (GLAPI*AlphaFunc)(GLenum, GLclampf);
    void (GLAPI*BlendFunc)(GLenum, GLenum);
    void (GLAPI*LogicOp)(GLenum);
    void (GLAPI*StencilFunc)(GLenum, GLint, GLuint);
    void (GLAPI*StencilOp)(GLenum, GLenum, GLenum);
    void (GLAPI*DepthFunc)(GLenum);
    void (GLAPI*PixelZoom)(GLfloat, GLfloat);
    void (GLAPI*PixelTransferf)(GLenum, GLfloat);
    void (GLAPI*PixelTransferi)(GLenum, GLint);
    void (GLAPI*PixelStoref)(GLenum, GLfloat);
    void (GLAPI*PixelStorei)(GLenum, GLint);
    void (GLAPI*PixelMapfv)(GLenum, GLint, const GLfloat *);
    void (GLAPI*PixelMapuiv)(GLenum, GLint, const GLuint *);
    void (GLAPI*PixelMapusv)(GLenum, GLint, const GLushort *);
    void (GLAPI*ReadBuffer)(GLenum);
    void (GLAPI*CopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (GLAPI*ReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *);
    void (GLAPI*DrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*GetBooleanv)(GLenum, GLboolean *);
    void (GLAPI*GetClipPlane)(GLenum, GLdouble *);
    void (GLAPI*GetDoublev)(GLenum, GLdouble *);
    GLenum (GLAPI*GetError)(void);
    void (GLAPI*GetFloatv)(GLenum, GLfloat *);
    void (GLAPI*GetIntegerv)(GLenum, GLint *);
    void (GLAPI*GetLightfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetLightiv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetMapdv)(GLenum, GLenum, GLdouble *);
    void (GLAPI*GetMapfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetMapiv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetMaterialiv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetPixelMapfv)(GLenum, GLfloat *);
    void (GLAPI*GetPixelMapuiv)(GLenum, GLuint *);
    void (GLAPI*GetPixelMapusv)(GLenum, GLushort *);
    void (GLAPI*GetPolygonStipple)(GLubyte *);
    const GLubyte * (GLAPI*GetString)(GLenum);
    void (GLAPI*GetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetTexEnviv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetTexGendv)(GLenum, GLenum, GLdouble *);
    void (GLAPI*GetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetTexGeniv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetTexImage)(GLenum, GLint, GLenum, GLenum, GLvoid *);
    void (GLAPI*GetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetTexParameteriv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (GLAPI*GetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    GLboolean (GLAPI*IsEnabled)(GLenum);
    GLboolean (GLAPI*IsList)(GLuint);
    void (GLAPI*DepthRange)(GLclampd, GLclampd);
    void (GLAPI*Frustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*LoadIdentity)(void);
    void (GLAPI*LoadMatrixf)(const GLfloat *);
    void (GLAPI*LoadMatrixd)(const GLdouble *);
    void (GLAPI*MatrixMode)(GLenum);
    void (GLAPI*MultMatrixf)(const GLfloat *);
    void (GLAPI*MultMatrixd)(const GLdouble *);
    void (GLAPI*Ortho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*PopMatrix)(void);
    void (GLAPI*PushMatrix)(void);
    void (GLAPI*Rotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*Rotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*Scaled)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*Scalef)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*Translated)(GLdouble, GLdouble, GLdouble);
    void (GLAPI*Translatef)(GLfloat, GLfloat, GLfloat);
    void (GLAPI*Viewport)(GLint, GLint, GLsizei, GLsizei);
    void (GLAPI*ArrayElement)(GLint);
    void (GLAPI*ColorPointer)(GLint, GLenum, GLsizei, const GLvoid *);
    void (GLAPI*DisableClientState)(GLenum);
    void (GLAPI*DrawArrays)(GLenum, GLint, GLsizei);
    void (GLAPI*DrawElements)(GLenum, GLsizei, GLenum, const GLvoid *);
    void (GLAPI*EdgeFlagPointer)(GLsizei, const GLboolean *);
    void (GLAPI*EnableClientState)(GLenum);
    void (GLAPI*GetPointerv)(GLenum, GLvoid* *);
    void (GLAPI*IndexPointer)(GLenum, GLsizei, const GLvoid *);
    void (GLAPI*InterleavedArrays)(GLenum, GLsizei, const GLvoid *);
    void (GLAPI*NormalPointer)(GLenum, GLsizei, const GLvoid *);
    void (GLAPI*TexCoordPointer)(GLint, GLenum, GLsizei, const GLvoid *);
    void (GLAPI*VertexPointer)(GLint, GLenum, GLsizei, const GLvoid *);
    void (GLAPI*PolygonOffset)(GLfloat, GLfloat);
    void (GLAPI*CopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (GLAPI*CopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (GLAPI*CopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (GLAPI*CopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (GLAPI*TexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*TexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
    GLboolean (GLAPI*AreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    void (GLAPI*BindTexture)(GLenum, GLuint);
    void (GLAPI*DeleteTextures)(GLsizei, const GLuint *);
    void (GLAPI*GenTextures)(GLsizei, GLuint *);
    GLboolean (GLAPI*IsTexture)(GLuint);
    void (GLAPI*PrioritizeTextures)(GLsizei, const GLuint *, const GLclampf *);
    void (GLAPI*Indexub)(GLubyte);
    void (GLAPI*Indexubv)(const GLubyte *);
    void (GLAPI*PopClientAttrib)(void);
    void (GLAPI*PushClientAttrib)(GLbitfield);
    void (GLAPI*BlendColor)(GLclampf, GLclampf, GLclampf, GLclampf);
    void (GLAPI*BlendEquation)(GLenum);
    void (GLAPI*DrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
    void (GLAPI*ColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*ColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*ColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (GLAPI*CopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (GLAPI*GetColorTable)(GLenum, GLenum, GLenum, GLvoid *);
    void (GLAPI*GetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (GLAPI*ColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*CopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (GLAPI*ConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*ConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*ConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (GLAPI*ConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (GLAPI*ConvolutionParameteri)(GLenum, GLenum, GLint);
    void (GLAPI*ConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (GLAPI*CopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (GLAPI*CopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (GLAPI*GetConvolutionFilter)(GLenum, GLenum, GLenum, GLvoid *);
    void (GLAPI*GetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetSeparableFilter)(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
    void (GLAPI*SeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
    void (GLAPI*GetHistogram)(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
    void (GLAPI*GetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (GLAPI*GetMinmax)(GLenum, GLboolean, GLenum, GLenum, GLvoid *);
    void (GLAPI*GetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (GLAPI*GetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (GLAPI*Histogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (GLAPI*Minmax)(GLenum, GLenum, GLboolean);
    void (GLAPI*ResetHistogram)(GLenum);
    void (GLAPI*ResetMinmax)(GLenum);
    void (GLAPI*TexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
    void (GLAPI*TexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
    void (GLAPI*CopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (GLAPI*ActiveTextureARB)(GLenum);
    void (GLAPI*ClientActiveTextureARB)(GLenum);
    void (GLAPI*MultiTexCoord1dARB)(GLenum, GLdouble);
    void (GLAPI*MultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (GLAPI*MultiTexCoord1fARB)(GLenum, GLfloat);
    void (GLAPI*MultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (GLAPI*MultiTexCoord1iARB)(GLenum, GLint);
    void (GLAPI*MultiTexCoord1ivARB)(GLenum, const GLint *);
    void (GLAPI*MultiTexCoord1sARB)(GLenum, GLshort);
    void (GLAPI*MultiTexCoord1svARB)(GLenum, const GLshort *);
    void (GLAPI*MultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (GLAPI*MultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (GLAPI*MultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (GLAPI*MultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (GLAPI*MultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (GLAPI*MultiTexCoord2ivARB)(GLenum, const GLint *);
    void (GLAPI*MultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (GLAPI*MultiTexCoord2svARB)(GLenum, const GLshort *);
    void (GLAPI*MultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (GLAPI*MultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (GLAPI*MultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (GLAPI*MultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (GLAPI*MultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (GLAPI*MultiTexCoord3ivARB)(GLenum, const GLint *);
    void (GLAPI*MultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (GLAPI*MultiTexCoord3svARB)(GLenum, const GLshort *);
    void (GLAPI*MultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (GLAPI*MultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (GLAPI*MultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (GLAPI*MultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (GLAPI*MultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (GLAPI*MultiTexCoord4ivARB)(GLenum, const GLint *);
    void (GLAPI*MultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (GLAPI*MultiTexCoord4svARB)(GLenum, const GLshort *);
    void (GLAPI*LockArraysEXT)(GLint, GLsizei);
    void (GLAPI*UnlockArraysEXT)(void);
    void (GLAPI*ArrayElementEXT)(GLint);
    void (GLAPI*ColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
    void (GLAPI*EdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (GLAPI*GetPointervEXT)(GLenum, GLvoid* *);
    void (GLAPI*IndexPointerEXT)(GLenum, GLsizei, GLsizei, const GLvoid *);
    void (GLAPI*NormalPointerEXT)(GLenum, GLsizei, GLsizei, const GLvoid *);
    void (GLAPI*TexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
    void (GLAPI*VertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
    void (GLAPI*DrawArraysEXT)(GLenum, GLint, GLsizei);
    GLboolean (GLAPI*AreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (GLAPI*DeleteTexturesEXT)(GLsizei, const GLuint *);
    void (GLAPI*GenTexturesEXT)(GLsizei, GLuint *);
    GLboolean (GLAPI*IsTextureEXT)(GLuint);
};

typedef struct __GLdispatchTableRec __GLdispatchTable;

struct __GLdispatchStateRec {
    __GLdispatchTable dispatch;
};

#endif /* _LANGUAGE_C || __cplusplus */

#endif /* __g_disp_h_ */
