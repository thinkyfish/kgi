/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */
#ifndef __g_lcfncs_h_
#define __g_lcfncs_h_

/*
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
**
** http://oss.sgi.com/projects/FreeB
**
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
**
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/

#include "types.h"
#include "apimacro.h"


extern void GLAPI __gllc_NewList( GLuint, GLenum);
extern void GLAPI __gllc_EndList( void);
extern void GLAPI __gllc_CallList( GLuint);
extern void GLAPI __gllc_CallLists( GLsizei, GLenum, const GLvoid *);
extern void GLAPI __gllc_DeleteLists( GLuint, GLsizei);
extern GLuint GLAPI __gllc_GenLists( GLsizei);
extern void GLAPI __gllc_ListBase( GLuint);
extern void GLAPI __gllc_Begin( GLenum);
extern void GLAPI __gllc_Bitmap( GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
extern void GLAPI __gllc_Color3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __gllc_Color3bv( const GLbyte *);
extern void GLAPI __gllc_Color3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Color3dv( const GLdouble *);
extern void GLAPI __gllc_Color3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Color3fv( const GLfloat *);
extern void GLAPI __gllc_Color3i( GLint, GLint, GLint);
extern void GLAPI __gllc_Color3iv( const GLint *);
extern void GLAPI __gllc_Color3s( GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Color3sv( const GLshort *);
extern void GLAPI __gllc_Color3ub( GLubyte, GLubyte, GLubyte);
extern void GLAPI __gllc_Color3ubv( const GLubyte *);
extern void GLAPI __gllc_Color3ui( GLuint, GLuint, GLuint);
extern void GLAPI __gllc_Color3uiv( const GLuint *);
extern void GLAPI __gllc_Color3us( GLushort, GLushort, GLushort);
extern void GLAPI __gllc_Color3usv( const GLushort *);
extern void GLAPI __gllc_Color4b( GLbyte, GLbyte, GLbyte, GLbyte);
extern void GLAPI __gllc_Color4bv( const GLbyte *);
extern void GLAPI __gllc_Color4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Color4dv( const GLdouble *);
extern void GLAPI __gllc_Color4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Color4fv( const GLfloat *);
extern void GLAPI __gllc_Color4i( GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_Color4iv( const GLint *);
extern void GLAPI __gllc_Color4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Color4sv( const GLshort *);
extern void GLAPI __gllc_Color4ub( GLubyte, GLubyte, GLubyte, GLubyte);
extern void GLAPI __gllc_Color4ubv( const GLubyte *);
extern void GLAPI __gllc_Color4ui( GLuint, GLuint, GLuint, GLuint);
extern void GLAPI __gllc_Color4uiv( const GLuint *);
extern void GLAPI __gllc_Color4us( GLushort, GLushort, GLushort, GLushort);
extern void GLAPI __gllc_Color4usv( const GLushort *);
extern void GLAPI __gllc_EdgeFlag( GLboolean);
extern void GLAPI __gllc_EdgeFlagv( const GLboolean *);
extern void GLAPI __gllc_End( void);
extern void GLAPI __gllc_Indexd( GLdouble);
extern void GLAPI __gllc_Indexdv( const GLdouble *);
extern void GLAPI __gllc_Indexf( GLfloat);
extern void GLAPI __gllc_Indexfv( const GLfloat *);
extern void GLAPI __gllc_Indexi( GLint);
extern void GLAPI __gllc_Indexiv( const GLint *);
extern void GLAPI __gllc_Indexs( GLshort);
extern void GLAPI __gllc_Indexsv( const GLshort *);
extern void GLAPI __gllc_Normal3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __gllc_Normal3bv( const GLbyte *);
extern void GLAPI __gllc_Normal3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Normal3dv( const GLdouble *);
extern void GLAPI __gllc_Normal3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Normal3fv( const GLfloat *);
extern void GLAPI __gllc_Normal3i( GLint, GLint, GLint);
extern void GLAPI __gllc_Normal3iv( const GLint *);
extern void GLAPI __gllc_Normal3s( GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Normal3sv( const GLshort *);
extern void GLAPI __gllc_RasterPos2d( GLdouble, GLdouble);
extern void GLAPI __gllc_RasterPos2dv( const GLdouble *);
extern void GLAPI __gllc_RasterPos2f( GLfloat, GLfloat);
extern void GLAPI __gllc_RasterPos2fv( const GLfloat *);
extern void GLAPI __gllc_RasterPos2i( GLint, GLint);
extern void GLAPI __gllc_RasterPos2iv( const GLint *);
extern void GLAPI __gllc_RasterPos2s( GLshort, GLshort);
extern void GLAPI __gllc_RasterPos2sv( const GLshort *);
extern void GLAPI __gllc_RasterPos3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_RasterPos3dv( const GLdouble *);
extern void GLAPI __gllc_RasterPos3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_RasterPos3fv( const GLfloat *);
extern void GLAPI __gllc_RasterPos3i( GLint, GLint, GLint);
extern void GLAPI __gllc_RasterPos3iv( const GLint *);
extern void GLAPI __gllc_RasterPos3s( GLshort, GLshort, GLshort);
extern void GLAPI __gllc_RasterPos3sv( const GLshort *);
extern void GLAPI __gllc_RasterPos4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_RasterPos4dv( const GLdouble *);
extern void GLAPI __gllc_RasterPos4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_RasterPos4fv( const GLfloat *);
extern void GLAPI __gllc_RasterPos4i( GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_RasterPos4iv( const GLint *);
extern void GLAPI __gllc_RasterPos4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_RasterPos4sv( const GLshort *);
extern void GLAPI __gllc_Rectd( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Rectdv( const GLdouble *, const GLdouble *);
extern void GLAPI __gllc_Rectf( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Rectfv( const GLfloat *, const GLfloat *);
extern void GLAPI __gllc_Recti( GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_Rectiv( const GLint *, const GLint *);
extern void GLAPI __gllc_Rects( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Rectsv( const GLshort *, const GLshort *);
extern void GLAPI __gllc_TexCoord1d( GLdouble);
extern void GLAPI __gllc_TexCoord1dv( const GLdouble *);
extern void GLAPI __gllc_TexCoord1f( GLfloat);
extern void GLAPI __gllc_TexCoord1fv( const GLfloat *);
extern void GLAPI __gllc_TexCoord1i( GLint);
extern void GLAPI __gllc_TexCoord1iv( const GLint *);
extern void GLAPI __gllc_TexCoord1s( GLshort);
extern void GLAPI __gllc_TexCoord1sv( const GLshort *);
extern void GLAPI __gllc_TexCoord2d( GLdouble, GLdouble);
extern void GLAPI __gllc_TexCoord2dv( const GLdouble *);
extern void GLAPI __gllc_TexCoord2f( GLfloat, GLfloat);
extern void GLAPI __gllc_TexCoord2fv( const GLfloat *);
extern void GLAPI __gllc_TexCoord2i( GLint, GLint);
extern void GLAPI __gllc_TexCoord2iv( const GLint *);
extern void GLAPI __gllc_TexCoord2s( GLshort, GLshort);
extern void GLAPI __gllc_TexCoord2sv( const GLshort *);
extern void GLAPI __gllc_TexCoord3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_TexCoord3dv( const GLdouble *);
extern void GLAPI __gllc_TexCoord3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_TexCoord3fv( const GLfloat *);
extern void GLAPI __gllc_TexCoord3i( GLint, GLint, GLint);
extern void GLAPI __gllc_TexCoord3iv( const GLint *);
extern void GLAPI __gllc_TexCoord3s( GLshort, GLshort, GLshort);
extern void GLAPI __gllc_TexCoord3sv( const GLshort *);
extern void GLAPI __gllc_TexCoord4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_TexCoord4dv( const GLdouble *);
extern void GLAPI __gllc_TexCoord4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_TexCoord4fv( const GLfloat *);
extern void GLAPI __gllc_TexCoord4i( GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_TexCoord4iv( const GLint *);
extern void GLAPI __gllc_TexCoord4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_TexCoord4sv( const GLshort *);
extern void GLAPI __gllc_Vertex2d( GLdouble, GLdouble);
extern void GLAPI __gllc_Vertex2dv( const GLdouble *);
extern void GLAPI __gllc_Vertex2f( GLfloat, GLfloat);
extern void GLAPI __gllc_Vertex2fv( const GLfloat *);
extern void GLAPI __gllc_Vertex2i( GLint, GLint);
extern void GLAPI __gllc_Vertex2iv( const GLint *);
extern void GLAPI __gllc_Vertex2s( GLshort, GLshort);
extern void GLAPI __gllc_Vertex2sv( const GLshort *);
extern void GLAPI __gllc_Vertex3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Vertex3dv( const GLdouble *);
extern void GLAPI __gllc_Vertex3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Vertex3fv( const GLfloat *);
extern void GLAPI __gllc_Vertex3i( GLint, GLint, GLint);
extern void GLAPI __gllc_Vertex3iv( const GLint *);
extern void GLAPI __gllc_Vertex3s( GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Vertex3sv( const GLshort *);
extern void GLAPI __gllc_Vertex4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Vertex4dv( const GLdouble *);
extern void GLAPI __gllc_Vertex4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Vertex4fv( const GLfloat *);
extern void GLAPI __gllc_Vertex4i( GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_Vertex4iv( const GLint *);
extern void GLAPI __gllc_Vertex4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_Vertex4sv( const GLshort *);
extern void GLAPI __gllc_ClipPlane( GLenum, const GLdouble *);
extern void GLAPI __gllc_ColorMaterial( GLenum, GLenum);
extern void GLAPI __gllc_CullFace( GLenum);
extern void GLAPI __gllc_Fogf( GLenum, GLfloat);
extern void GLAPI __gllc_Fogfv( GLenum, const GLfloat *);
extern void GLAPI __gllc_Fogi( GLenum, GLint);
extern void GLAPI __gllc_Fogiv( GLenum, const GLint *);
extern void GLAPI __gllc_FrontFace( GLenum);
extern void GLAPI __gllc_Hint( GLenum, GLenum);
extern void GLAPI __gllc_Lightf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_Lightfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_Lighti( GLenum, GLenum, GLint);
extern void GLAPI __gllc_Lightiv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_LightModelf( GLenum, GLfloat);
extern void GLAPI __gllc_LightModelfv( GLenum, const GLfloat *);
extern void GLAPI __gllc_LightModeli( GLenum, GLint);
extern void GLAPI __gllc_LightModeliv( GLenum, const GLint *);
extern void GLAPI __gllc_LineStipple( GLint, GLushort);
extern void GLAPI __gllc_LineWidth( GLfloat);
extern void GLAPI __gllc_Materialf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_Materialfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_Materiali( GLenum, GLenum, GLint);
extern void GLAPI __gllc_Materialiv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_PointSize( GLfloat);
extern void GLAPI __gllc_PolygonMode( GLenum, GLenum);
extern void GLAPI __gllc_PolygonStipple( const GLubyte *);
extern void GLAPI __gllc_Scissor( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __gllc_ShadeModel( GLenum);
extern void GLAPI __gllc_TexParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_TexParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_TexParameteri( GLenum, GLenum, GLint);
extern void GLAPI __gllc_TexParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_TexImage1D( GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_TexImage2D( GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_TexEnvf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_TexEnvfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_TexEnvi( GLenum, GLenum, GLint);
extern void GLAPI __gllc_TexEnviv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_TexGend( GLenum, GLenum, GLdouble);
extern void GLAPI __gllc_TexGendv( GLenum, GLenum, const GLdouble *);
extern void GLAPI __gllc_TexGenf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_TexGenfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_TexGeni( GLenum, GLenum, GLint);
extern void GLAPI __gllc_TexGeniv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_FeedbackBuffer( GLsizei, GLenum, GLfloat *);
extern void GLAPI __gllc_SelectBuffer( GLsizei, GLuint *);
extern GLint GLAPI __gllc_RenderMode( GLenum);
extern void GLAPI __gllc_InitNames( void);
extern void GLAPI __gllc_LoadName( GLuint);
extern void GLAPI __gllc_PassThrough( GLfloat);
extern void GLAPI __gllc_PopName( void);
extern void GLAPI __gllc_PushName( GLuint);
extern void GLAPI __gllc_DrawBuffer( GLenum);
extern void GLAPI __gllc_Clear( GLbitfield);
extern void GLAPI __gllc_ClearAccum( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_ClearIndex( GLfloat);
extern void GLAPI __gllc_ClearColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __gllc_ClearStencil( GLint);
extern void GLAPI __gllc_ClearDepth( GLclampd);
extern void GLAPI __gllc_StencilMask( GLuint);
extern void GLAPI __gllc_ColorMask( GLboolean, GLboolean, GLboolean, GLboolean);
extern void GLAPI __gllc_DepthMask( GLboolean);
extern void GLAPI __gllc_IndexMask( GLuint);
extern void GLAPI __gllc_Accum( GLenum, GLfloat);
extern void GLAPI __gllc_Disable( GLenum);
extern void GLAPI __gllc_Enable( GLenum);
extern void GLAPI __gllc_Finish( void);
extern void GLAPI __gllc_Flush( void);
extern void GLAPI __gllc_PopAttrib( void);
extern void GLAPI __gllc_PushAttrib( GLbitfield);
extern void GLAPI __gllc_Map1d( GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __gllc_Map1f( GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __gllc_Map2d( GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __gllc_Map2f( GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __gllc_MapGrid1d( GLint, GLdouble, GLdouble);
extern void GLAPI __gllc_MapGrid1f( GLint, GLfloat, GLfloat);
extern void GLAPI __gllc_MapGrid2d( GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
extern void GLAPI __gllc_MapGrid2f( GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
extern void GLAPI __gllc_EvalCoord1d( GLdouble);
extern void GLAPI __gllc_EvalCoord1dv( const GLdouble *);
extern void GLAPI __gllc_EvalCoord1f( GLfloat);
extern void GLAPI __gllc_EvalCoord1fv( const GLfloat *);
extern void GLAPI __gllc_EvalCoord2d( GLdouble, GLdouble);
extern void GLAPI __gllc_EvalCoord2dv( const GLdouble *);
extern void GLAPI __gllc_EvalCoord2f( GLfloat, GLfloat);
extern void GLAPI __gllc_EvalCoord2fv( const GLfloat *);
extern void GLAPI __gllc_EvalMesh1( GLenum, GLint, GLint);
extern void GLAPI __gllc_EvalPoint1( GLint);
extern void GLAPI __gllc_EvalMesh2( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_EvalPoint2( GLint, GLint);
extern void GLAPI __gllc_AlphaFunc( GLenum, GLclampf);
extern void GLAPI __gllc_BlendFunc( GLenum, GLenum);
extern void GLAPI __gllc_LogicOp( GLenum);
extern void GLAPI __gllc_StencilFunc( GLenum, GLint, GLuint);
extern void GLAPI __gllc_StencilOp( GLenum, GLenum, GLenum);
extern void GLAPI __gllc_DepthFunc( GLenum);
extern void GLAPI __gllc_PixelZoom( GLfloat, GLfloat);
extern void GLAPI __gllc_PixelTransferf( GLenum, GLfloat);
extern void GLAPI __gllc_PixelTransferi( GLenum, GLint);
extern void GLAPI __gllc_PixelStoref( GLenum, GLfloat);
extern void GLAPI __gllc_PixelStorei( GLenum, GLint);
extern void GLAPI __gllc_PixelMapfv( GLenum, GLint, const GLfloat *);
extern void GLAPI __gllc_PixelMapuiv( GLenum, GLint, const GLuint *);
extern void GLAPI __gllc_PixelMapusv( GLenum, GLint, const GLushort *);
extern void GLAPI __gllc_ReadBuffer( GLenum);
extern void GLAPI __gllc_CopyPixels( GLint, GLint, GLsizei, GLsizei, GLenum);
extern void GLAPI __gllc_ReadPixels( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_DrawPixels( GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_GetBooleanv( GLenum, GLboolean *);
extern void GLAPI __gllc_GetClipPlane( GLenum, GLdouble *);
extern void GLAPI __gllc_GetDoublev( GLenum, GLdouble *);
extern GLenum GLAPI __gllc_GetError( void);
extern void GLAPI __gllc_GetFloatv( GLenum, GLfloat *);
extern void GLAPI __gllc_GetIntegerv( GLenum, GLint *);
extern void GLAPI __gllc_GetLightfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetLightiv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetMapdv( GLenum, GLenum, GLdouble *);
extern void GLAPI __gllc_GetMapfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetMapiv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetMaterialfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetMaterialiv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetPixelMapfv( GLenum, GLfloat *);
extern void GLAPI __gllc_GetPixelMapuiv( GLenum, GLuint *);
extern void GLAPI __gllc_GetPixelMapusv( GLenum, GLushort *);
extern void GLAPI __gllc_GetPolygonStipple( GLubyte *);
extern const GLubyte * GLAPI __gllc_GetString( GLenum);
extern void GLAPI __gllc_GetTexEnvfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetTexEnviv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetTexGendv( GLenum, GLenum, GLdouble *);
extern void GLAPI __gllc_GetTexGenfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetTexGeniv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetTexImage( GLenum, GLint, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_GetTexParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetTexParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetTexLevelParameterfv( GLenum, GLint, GLenum, GLfloat *);
extern void GLAPI __gllc_GetTexLevelParameteriv( GLenum, GLint, GLenum, GLint *);
extern GLboolean GLAPI __gllc_IsEnabled( GLenum);
extern GLboolean GLAPI __gllc_IsList( GLuint);
extern void GLAPI __gllc_DepthRange( GLclampd, GLclampd);
extern void GLAPI __gllc_Frustum( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_LoadIdentity( void);
extern void GLAPI __gllc_LoadMatrixf( const GLfloat *);
extern void GLAPI __gllc_LoadMatrixd( const GLdouble *);
extern void GLAPI __gllc_MatrixMode( GLenum);
extern void GLAPI __gllc_MultMatrixf( const GLfloat *);
extern void GLAPI __gllc_MultMatrixd( const GLdouble *);
extern void GLAPI __gllc_Ortho( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_PopMatrix( void);
extern void GLAPI __gllc_PushMatrix( void);
extern void GLAPI __gllc_Rotated( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Rotatef( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Scaled( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Scalef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Translated( GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_Translatef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_Viewport( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __gllc_ArrayElement( GLint);
extern void GLAPI __gllc_ColorPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_DisableClientState( GLenum);
extern void GLAPI __gllc_DrawArrays( GLenum, GLint, GLsizei);
extern void GLAPI __gllc_DrawElements( GLenum, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __gllc_EdgeFlagPointer( GLsizei, const GLboolean *);
extern void GLAPI __gllc_EnableClientState( GLenum);
extern void GLAPI __gllc_GetPointerv( GLenum, GLvoid* *);
extern void GLAPI __gllc_IndexPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_InterleavedArrays( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_NormalPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_TexCoordPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_VertexPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __gllc_PolygonOffset( GLfloat, GLfloat);
extern void GLAPI __gllc_CopyTexImage1D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
extern void GLAPI __gllc_CopyTexImage2D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
extern void GLAPI __gllc_CopyTexSubImage1D( GLenum, GLint, GLint, GLint, GLint, GLsizei);
extern void GLAPI __gllc_CopyTexSubImage2D( GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __gllc_TexSubImage1D( GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_TexSubImage2D( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern GLboolean GLAPI __gllc_AreTexturesResident( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __gllc_BindTexture( GLenum, GLuint);
extern void GLAPI __gllc_DeleteTextures( GLsizei, const GLuint *);
extern void GLAPI __gllc_GenTextures( GLsizei, GLuint *);
extern GLboolean GLAPI __gllc_IsTexture( GLuint);
extern void GLAPI __gllc_PrioritizeTextures( GLsizei, const GLuint *, const GLclampf *);
extern void GLAPI __gllc_Indexub( GLubyte);
extern void GLAPI __gllc_Indexubv( const GLubyte *);
extern void GLAPI __gllc_PopClientAttrib( void);
extern void GLAPI __gllc_PushClientAttrib( GLbitfield);
extern void GLAPI __gllc_BlendColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __gllc_BlendEquation( GLenum);
extern void GLAPI __gllc_DrawRangeElements( GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __gllc_ColorTable( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_ColorTableParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_ColorTableParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_CopyColorTable( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __gllc_GetColorTable( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_GetColorTableParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetColorTableParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_ColorSubTable( GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_CopyColorSubTable( GLenum, GLsizei, GLint, GLint, GLsizei);
extern void GLAPI __gllc_ConvolutionFilter1D( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_ConvolutionFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_ConvolutionParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __gllc_ConvolutionParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __gllc_ConvolutionParameteri( GLenum, GLenum, GLint);
extern void GLAPI __gllc_ConvolutionParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __gllc_CopyConvolutionFilter1D( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __gllc_CopyConvolutionFilter2D( GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __gllc_GetConvolutionFilter( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_GetConvolutionParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetConvolutionParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetSeparableFilter( GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
extern void GLAPI __gllc_SeparableFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
extern void GLAPI __gllc_GetHistogram( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_GetHistogramParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetHistogramParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_GetMinmax( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __gllc_GetMinmaxParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __gllc_GetMinmaxParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __gllc_Histogram( GLenum, GLsizei, GLenum, GLboolean);
extern void GLAPI __gllc_Minmax( GLenum, GLenum, GLboolean);
extern void GLAPI __gllc_ResetHistogram( GLenum);
extern void GLAPI __gllc_ResetMinmax( GLenum);
extern void GLAPI __gllc_TexImage3D( GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_TexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __gllc_CopyTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __gllc_ActiveTextureARB( GLenum);
extern void GLAPI __gllc_ClientActiveTextureARB( GLenum);
extern void GLAPI __gllc_MultiTexCoord1dARB( GLenum, GLdouble);
extern void GLAPI __gllc_MultiTexCoord1dvARB( GLenum, const GLdouble *);
extern void GLAPI __gllc_MultiTexCoord1fARB( GLenum, GLfloat);
extern void GLAPI __gllc_MultiTexCoord1fvARB( GLenum, const GLfloat *);
extern void GLAPI __gllc_MultiTexCoord1iARB( GLenum, GLint);
extern void GLAPI __gllc_MultiTexCoord1ivARB( GLenum, const GLint *);
extern void GLAPI __gllc_MultiTexCoord1sARB( GLenum, GLshort);
extern void GLAPI __gllc_MultiTexCoord1svARB( GLenum, const GLshort *);
extern void GLAPI __gllc_MultiTexCoord2dARB( GLenum, GLdouble, GLdouble);
extern void GLAPI __gllc_MultiTexCoord2dvARB( GLenum, const GLdouble *);
extern void GLAPI __gllc_MultiTexCoord2fARB( GLenum, GLfloat, GLfloat);
extern void GLAPI __gllc_MultiTexCoord2fvARB( GLenum, const GLfloat *);
extern void GLAPI __gllc_MultiTexCoord2iARB( GLenum, GLint, GLint);
extern void GLAPI __gllc_MultiTexCoord2ivARB( GLenum, const GLint *);
extern void GLAPI __gllc_MultiTexCoord2sARB( GLenum, GLshort, GLshort);
extern void GLAPI __gllc_MultiTexCoord2svARB( GLenum, const GLshort *);
extern void GLAPI __gllc_MultiTexCoord3dARB( GLenum, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_MultiTexCoord3dvARB( GLenum, const GLdouble *);
extern void GLAPI __gllc_MultiTexCoord3fARB( GLenum, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_MultiTexCoord3fvARB( GLenum, const GLfloat *);
extern void GLAPI __gllc_MultiTexCoord3iARB( GLenum, GLint, GLint, GLint);
extern void GLAPI __gllc_MultiTexCoord3ivARB( GLenum, const GLint *);
extern void GLAPI __gllc_MultiTexCoord3sARB( GLenum, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_MultiTexCoord3svARB( GLenum, const GLshort *);
extern void GLAPI __gllc_MultiTexCoord4dARB( GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __gllc_MultiTexCoord4dvARB( GLenum, const GLdouble *);
extern void GLAPI __gllc_MultiTexCoord4fARB( GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __gllc_MultiTexCoord4fvARB( GLenum, const GLfloat *);
extern void GLAPI __gllc_MultiTexCoord4iARB( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __gllc_MultiTexCoord4ivARB( GLenum, const GLint *);
extern void GLAPI __gllc_MultiTexCoord4sARB( GLenum, GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __gllc_MultiTexCoord4svARB( GLenum, const GLshort *);
extern void GLAPI __gllc_LockArraysEXT( GLint, GLsizei);
extern void GLAPI __gllc_UnlockArraysEXT( void);
extern void GLAPI __gllc_ArrayElementEXT( GLint);
extern void GLAPI __gllc_ColorPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __gllc_EdgeFlagPointerEXT( GLsizei, GLsizei, const GLboolean *);
extern void GLAPI __gllc_GetPointervEXT( GLenum, GLvoid* *);
extern void GLAPI __gllc_IndexPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __gllc_NormalPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __gllc_TexCoordPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __gllc_VertexPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __gllc_DrawArraysEXT( GLenum, GLint, GLsizei);
extern GLboolean GLAPI __gllc_AreTexturesResidentEXT( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __gllc_DeleteTexturesEXT( GLsizei, const GLuint *);
extern void GLAPI __gllc_GenTexturesEXT( GLsizei, GLuint *);
extern GLboolean GLAPI __gllc_IsTextureEXT( GLuint);

#endif /* __g_lcfncs_h_ */
