/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */
#ifndef __g_imfncs_h_
#define __g_imfncs_h_

/*
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
**
** http://oss.sgi.com/projects/FreeB
**
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
**
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/

#include "types.h"
#include "apimacro.h"


extern void GLAPI __glim_NewList( GLuint, GLenum);
extern void GLAPI __glim_EndList( void);
extern void GLAPI __glim_CallList( GLuint);
extern void GLAPI __glim_CallLists( GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glim_DeleteLists( GLuint, GLsizei);
extern GLuint GLAPI __glim_GenLists( GLsizei);
extern void GLAPI __glim_ListBase( GLuint);
extern void GLAPI __glim_Begin( GLenum);
extern void GLAPI __glim_Bitmap( GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
extern void GLAPI __glim_Color3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __glim_Color3bv( const GLbyte *);
extern void GLAPI __glim_Color3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Color3dv( const GLdouble *);
extern void GLAPI __glim_Color3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Color3fv( const GLfloat *);
extern void GLAPI __glim_Color3i( GLint, GLint, GLint);
extern void GLAPI __glim_Color3iv( const GLint *);
extern void GLAPI __glim_Color3s( GLshort, GLshort, GLshort);
extern void GLAPI __glim_Color3sv( const GLshort *);
extern void GLAPI __glim_Color3ub( GLubyte, GLubyte, GLubyte);
extern void GLAPI __glim_Color3ubv( const GLubyte *);
extern void GLAPI __glim_Color3ui( GLuint, GLuint, GLuint);
extern void GLAPI __glim_Color3uiv( const GLuint *);
extern void GLAPI __glim_Color3us( GLushort, GLushort, GLushort);
extern void GLAPI __glim_Color3usv( const GLushort *);
extern void GLAPI __glim_Color4b( GLbyte, GLbyte, GLbyte, GLbyte);
extern void GLAPI __glim_Color4bv( const GLbyte *);
extern void GLAPI __glim_Color4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Color4dv( const GLdouble *);
extern void GLAPI __glim_Color4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Color4fv( const GLfloat *);
extern void GLAPI __glim_Color4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glim_Color4iv( const GLint *);
extern void GLAPI __glim_Color4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_Color4sv( const GLshort *);
extern void GLAPI __glim_Color4ub( GLubyte, GLubyte, GLubyte, GLubyte);
extern void GLAPI __glim_Color4ubv( const GLubyte *);
extern void GLAPI __glim_Color4ui( GLuint, GLuint, GLuint, GLuint);
extern void GLAPI __glim_Color4uiv( const GLuint *);
extern void GLAPI __glim_Color4us( GLushort, GLushort, GLushort, GLushort);
extern void GLAPI __glim_Color4usv( const GLushort *);
extern void GLAPI __glim_EdgeFlag( GLboolean);
extern void GLAPI __glim_EdgeFlagv( const GLboolean *);
extern void GLAPI __glim_End( void);
extern void GLAPI __glim_Indexd( GLdouble);
extern void GLAPI __glim_Indexdv( const GLdouble *);
extern void GLAPI __glim_Indexf( GLfloat);
extern void GLAPI __glim_Indexfv( const GLfloat *);
extern void GLAPI __glim_Indexi( GLint);
extern void GLAPI __glim_Indexiv( const GLint *);
extern void GLAPI __glim_Indexs( GLshort);
extern void GLAPI __glim_Indexsv( const GLshort *);
extern void GLAPI __glim_Normal3b( GLbyte, GLbyte, GLbyte);
extern void GLAPI __glim_Normal3bv( const GLbyte *);
extern void GLAPI __glim_Normal3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Normal3dv( const GLdouble *);
extern void GLAPI __glim_Normal3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Normal3fv( const GLfloat *);
extern void GLAPI __glim_Normal3i( GLint, GLint, GLint);
extern void GLAPI __glim_Normal3iv( const GLint *);
extern void GLAPI __glim_Normal3s( GLshort, GLshort, GLshort);
extern void GLAPI __glim_Normal3sv( const GLshort *);
extern void GLAPI __glim_RasterPos2d( GLdouble, GLdouble);
extern void GLAPI __glim_RasterPos2dv( const GLdouble *);
extern void GLAPI __glim_RasterPos2f( GLfloat, GLfloat);
extern void GLAPI __glim_RasterPos2fv( const GLfloat *);
extern void GLAPI __glim_RasterPos2i( GLint, GLint);
extern void GLAPI __glim_RasterPos2iv( const GLint *);
extern void GLAPI __glim_RasterPos2s( GLshort, GLshort);
extern void GLAPI __glim_RasterPos2sv( const GLshort *);
extern void GLAPI __glim_RasterPos3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_RasterPos3dv( const GLdouble *);
extern void GLAPI __glim_RasterPos3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_RasterPos3fv( const GLfloat *);
extern void GLAPI __glim_RasterPos3i( GLint, GLint, GLint);
extern void GLAPI __glim_RasterPos3iv( const GLint *);
extern void GLAPI __glim_RasterPos3s( GLshort, GLshort, GLshort);
extern void GLAPI __glim_RasterPos3sv( const GLshort *);
extern void GLAPI __glim_RasterPos4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_RasterPos4dv( const GLdouble *);
extern void GLAPI __glim_RasterPos4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_RasterPos4fv( const GLfloat *);
extern void GLAPI __glim_RasterPos4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glim_RasterPos4iv( const GLint *);
extern void GLAPI __glim_RasterPos4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_RasterPos4sv( const GLshort *);
extern void GLAPI __glim_Rectd( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Rectdv( const GLdouble *, const GLdouble *);
extern void GLAPI __glim_Rectf( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Rectfv( const GLfloat *, const GLfloat *);
extern void GLAPI __glim_Recti( GLint, GLint, GLint, GLint);
extern void GLAPI __glim_Rectiv( const GLint *, const GLint *);
extern void GLAPI __glim_Rects( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_Rectsv( const GLshort *, const GLshort *);
extern void GLAPI __glim_TexCoord1d( GLdouble);
extern void GLAPI __glim_TexCoord1dv( const GLdouble *);
extern void GLAPI __glim_TexCoord1f( GLfloat);
extern void GLAPI __glim_TexCoord1fv( const GLfloat *);
extern void GLAPI __glim_TexCoord1i( GLint);
extern void GLAPI __glim_TexCoord1iv( const GLint *);
extern void GLAPI __glim_TexCoord1s( GLshort);
extern void GLAPI __glim_TexCoord1sv( const GLshort *);
extern void GLAPI __glim_TexCoord2d( GLdouble, GLdouble);
extern void GLAPI __glim_TexCoord2dv( const GLdouble *);
extern void GLAPI __glim_TexCoord2f( GLfloat, GLfloat);
extern void GLAPI __glim_TexCoord2fv( const GLfloat *);
extern void GLAPI __glim_TexCoord2i( GLint, GLint);
extern void GLAPI __glim_TexCoord2iv( const GLint *);
extern void GLAPI __glim_TexCoord2s( GLshort, GLshort);
extern void GLAPI __glim_TexCoord2sv( const GLshort *);
extern void GLAPI __glim_TexCoord3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_TexCoord3dv( const GLdouble *);
extern void GLAPI __glim_TexCoord3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_TexCoord3fv( const GLfloat *);
extern void GLAPI __glim_TexCoord3i( GLint, GLint, GLint);
extern void GLAPI __glim_TexCoord3iv( const GLint *);
extern void GLAPI __glim_TexCoord3s( GLshort, GLshort, GLshort);
extern void GLAPI __glim_TexCoord3sv( const GLshort *);
extern void GLAPI __glim_TexCoord4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_TexCoord4dv( const GLdouble *);
extern void GLAPI __glim_TexCoord4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_TexCoord4fv( const GLfloat *);
extern void GLAPI __glim_TexCoord4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glim_TexCoord4iv( const GLint *);
extern void GLAPI __glim_TexCoord4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_TexCoord4sv( const GLshort *);
extern void GLAPI __glim_Vertex2d( GLdouble, GLdouble);
extern void GLAPI __glim_Vertex2dv( const GLdouble *);
extern void GLAPI __glim_Vertex2f( GLfloat, GLfloat);
extern void GLAPI __glim_Vertex2fv( const GLfloat *);
extern void GLAPI __glim_Vertex2i( GLint, GLint);
extern void GLAPI __glim_Vertex2iv( const GLint *);
extern void GLAPI __glim_Vertex2s( GLshort, GLshort);
extern void GLAPI __glim_Vertex2sv( const GLshort *);
extern void GLAPI __glim_Vertex3d( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Vertex3dv( const GLdouble *);
extern void GLAPI __glim_Vertex3f( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Vertex3fv( const GLfloat *);
extern void GLAPI __glim_Vertex3i( GLint, GLint, GLint);
extern void GLAPI __glim_Vertex3iv( const GLint *);
extern void GLAPI __glim_Vertex3s( GLshort, GLshort, GLshort);
extern void GLAPI __glim_Vertex3sv( const GLshort *);
extern void GLAPI __glim_Vertex4d( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Vertex4dv( const GLdouble *);
extern void GLAPI __glim_Vertex4f( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Vertex4fv( const GLfloat *);
extern void GLAPI __glim_Vertex4i( GLint, GLint, GLint, GLint);
extern void GLAPI __glim_Vertex4iv( const GLint *);
extern void GLAPI __glim_Vertex4s( GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_Vertex4sv( const GLshort *);
extern void GLAPI __glim_ClipPlane( GLenum, const GLdouble *);
extern void GLAPI __glim_ColorMaterial( GLenum, GLenum);
extern void GLAPI __glim_CullFace( GLenum);
extern void GLAPI __glim_Fogf( GLenum, GLfloat);
extern void GLAPI __glim_Fogfv( GLenum, const GLfloat *);
extern void GLAPI __glim_Fogi( GLenum, GLint);
extern void GLAPI __glim_Fogiv( GLenum, const GLint *);
extern void GLAPI __glim_FrontFace( GLenum);
extern void GLAPI __glim_Hint( GLenum, GLenum);
extern void GLAPI __glim_Lightf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_Lightfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_Lighti( GLenum, GLenum, GLint);
extern void GLAPI __glim_Lightiv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_LightModelf( GLenum, GLfloat);
extern void GLAPI __glim_LightModelfv( GLenum, const GLfloat *);
extern void GLAPI __glim_LightModeli( GLenum, GLint);
extern void GLAPI __glim_LightModeliv( GLenum, const GLint *);
extern void GLAPI __glim_LineStipple( GLint, GLushort);
extern void GLAPI __glim_LineWidth( GLfloat);
extern void GLAPI __glim_Materialf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_Materialfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_Materiali( GLenum, GLenum, GLint);
extern void GLAPI __glim_Materialiv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_PointSize( GLfloat);
extern void GLAPI __glim_PolygonMode( GLenum, GLenum);
extern void GLAPI __glim_PolygonStipple( const GLubyte *);
extern void GLAPI __glim_Scissor( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glim_ShadeModel( GLenum);
extern void GLAPI __glim_TexParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_TexParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_TexParameteri( GLenum, GLenum, GLint);
extern void GLAPI __glim_TexParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_TexImage1D( GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_TexImage2D( GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_TexEnvf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_TexEnvfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_TexEnvi( GLenum, GLenum, GLint);
extern void GLAPI __glim_TexEnviv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_TexGend( GLenum, GLenum, GLdouble);
extern void GLAPI __glim_TexGendv( GLenum, GLenum, const GLdouble *);
extern void GLAPI __glim_TexGenf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_TexGenfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_TexGeni( GLenum, GLenum, GLint);
extern void GLAPI __glim_TexGeniv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_FeedbackBuffer( GLsizei, GLenum, GLfloat *);
extern void GLAPI __glim_SelectBuffer( GLsizei, GLuint *);
extern GLint GLAPI __glim_RenderMode( GLenum);
extern void GLAPI __glim_InitNames( void);
extern void GLAPI __glim_LoadName( GLuint);
extern void GLAPI __glim_PassThrough( GLfloat);
extern void GLAPI __glim_PopName( void);
extern void GLAPI __glim_PushName( GLuint);
extern void GLAPI __glim_DrawBuffer( GLenum);
extern void GLAPI __glim_Clear( GLbitfield);
extern void GLAPI __glim_ClearAccum( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_ClearIndex( GLfloat);
extern void GLAPI __glim_ClearColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __glim_ClearStencil( GLint);
extern void GLAPI __glim_ClearDepth( GLclampd);
extern void GLAPI __glim_StencilMask( GLuint);
extern void GLAPI __glim_ColorMask( GLboolean, GLboolean, GLboolean, GLboolean);
extern void GLAPI __glim_DepthMask( GLboolean);
extern void GLAPI __glim_IndexMask( GLuint);
extern void GLAPI __glim_Accum( GLenum, GLfloat);
extern void GLAPI __glim_Disable( GLenum);
extern void GLAPI __glim_Enable( GLenum);
extern void GLAPI __glim_Finish( void);
extern void GLAPI __glim_Flush( void);
extern void GLAPI __glim_PopAttrib( void);
extern void GLAPI __glim_PushAttrib( GLbitfield);
extern void GLAPI __glim_Map1d( GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __glim_Map1f( GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __glim_Map2d( GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
extern void GLAPI __glim_Map2f( GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
extern void GLAPI __glim_MapGrid1d( GLint, GLdouble, GLdouble);
extern void GLAPI __glim_MapGrid1f( GLint, GLfloat, GLfloat);
extern void GLAPI __glim_MapGrid2d( GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
extern void GLAPI __glim_MapGrid2f( GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
extern void GLAPI __glim_EvalCoord1d( GLdouble);
extern void GLAPI __glim_EvalCoord1dv( const GLdouble *);
extern void GLAPI __glim_EvalCoord1f( GLfloat);
extern void GLAPI __glim_EvalCoord1fv( const GLfloat *);
extern void GLAPI __glim_EvalCoord2d( GLdouble, GLdouble);
extern void GLAPI __glim_EvalCoord2dv( const GLdouble *);
extern void GLAPI __glim_EvalCoord2f( GLfloat, GLfloat);
extern void GLAPI __glim_EvalCoord2fv( const GLfloat *);
extern void GLAPI __glim_EvalMesh1( GLenum, GLint, GLint);
extern void GLAPI __glim_EvalPoint1( GLint);
extern void GLAPI __glim_EvalMesh2( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __glim_EvalPoint2( GLint, GLint);
extern void GLAPI __glim_AlphaFunc( GLenum, GLclampf);
extern void GLAPI __glim_BlendFunc( GLenum, GLenum);
extern void GLAPI __glim_LogicOp( GLenum);
extern void GLAPI __glim_StencilFunc( GLenum, GLint, GLuint);
extern void GLAPI __glim_StencilOp( GLenum, GLenum, GLenum);
extern void GLAPI __glim_DepthFunc( GLenum);
extern void GLAPI __glim_PixelZoom( GLfloat, GLfloat);
extern void GLAPI __glim_PixelTransferf( GLenum, GLfloat);
extern void GLAPI __glim_PixelTransferi( GLenum, GLint);
extern void GLAPI __glim_PixelStoref( GLenum, GLfloat);
extern void GLAPI __glim_PixelStorei( GLenum, GLint);
extern void GLAPI __glim_PixelMapfv( GLenum, GLint, const GLfloat *);
extern void GLAPI __glim_PixelMapuiv( GLenum, GLint, const GLuint *);
extern void GLAPI __glim_PixelMapusv( GLenum, GLint, const GLushort *);
extern void GLAPI __glim_ReadBuffer( GLenum);
extern void GLAPI __glim_CopyPixels( GLint, GLint, GLsizei, GLsizei, GLenum);
extern void GLAPI __glim_ReadPixels( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_DrawPixels( GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_GetBooleanv( GLenum, GLboolean *);
extern void GLAPI __glim_GetClipPlane( GLenum, GLdouble *);
extern void GLAPI __glim_GetDoublev( GLenum, GLdouble *);
extern GLenum GLAPI __glim_GetError( void);
extern void GLAPI __glim_GetFloatv( GLenum, GLfloat *);
extern void GLAPI __glim_GetIntegerv( GLenum, GLint *);
extern void GLAPI __glim_GetLightfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetLightiv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetMapdv( GLenum, GLenum, GLdouble *);
extern void GLAPI __glim_GetMapfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetMapiv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetMaterialfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetMaterialiv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetPixelMapfv( GLenum, GLfloat *);
extern void GLAPI __glim_GetPixelMapuiv( GLenum, GLuint *);
extern void GLAPI __glim_GetPixelMapusv( GLenum, GLushort *);
extern void GLAPI __glim_GetPolygonStipple( GLubyte *);
extern const GLubyte * GLAPI __glim_GetString( GLenum);
extern void GLAPI __glim_GetTexEnvfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetTexEnviv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetTexGendv( GLenum, GLenum, GLdouble *);
extern void GLAPI __glim_GetTexGenfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetTexGeniv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetTexImage( GLenum, GLint, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_GetTexParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetTexParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetTexLevelParameterfv( GLenum, GLint, GLenum, GLfloat *);
extern void GLAPI __glim_GetTexLevelParameteriv( GLenum, GLint, GLenum, GLint *);
extern GLboolean GLAPI __glim_IsEnabled( GLenum);
extern GLboolean GLAPI __glim_IsList( GLuint);
extern void GLAPI __glim_DepthRange( GLclampd, GLclampd);
extern void GLAPI __glim_Frustum( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_LoadIdentity( void);
extern void GLAPI __glim_LoadMatrixf( const GLfloat *);
extern void GLAPI __glim_LoadMatrixd( const GLdouble *);
extern void GLAPI __glim_MatrixMode( GLenum);
extern void GLAPI __glim_MultMatrixf( const GLfloat *);
extern void GLAPI __glim_MultMatrixd( const GLdouble *);
extern void GLAPI __glim_Ortho( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_PopMatrix( void);
extern void GLAPI __glim_PushMatrix( void);
extern void GLAPI __glim_Rotated( GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Rotatef( GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Scaled( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Scalef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Translated( GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_Translatef( GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_Viewport( GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glim_ArrayElement( GLint);
extern void GLAPI __glim_ColorPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_DisableClientState( GLenum);
extern void GLAPI __glim_DrawArrays( GLenum, GLint, GLsizei);
extern void GLAPI __glim_DrawElements( GLenum, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glim_EdgeFlagPointer( GLsizei, const GLboolean *);
extern void GLAPI __glim_EnableClientState( GLenum);
extern void GLAPI __glim_GetPointerv( GLenum, GLvoid* *);
extern void GLAPI __glim_IndexPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_InterleavedArrays( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_NormalPointer( GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_TexCoordPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_VertexPointer( GLint, GLenum, GLsizei, const GLvoid *);
extern void GLAPI __glim_PolygonOffset( GLfloat, GLfloat);
extern void GLAPI __glim_CopyTexImage1D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
extern void GLAPI __glim_CopyTexImage2D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
extern void GLAPI __glim_CopyTexSubImage1D( GLenum, GLint, GLint, GLint, GLint, GLsizei);
extern void GLAPI __glim_CopyTexSubImage2D( GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glim_TexSubImage1D( GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_TexSubImage2D( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern GLboolean GLAPI __glim_AreTexturesResident( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __glim_BindTexture( GLenum, GLuint);
extern void GLAPI __glim_DeleteTextures( GLsizei, const GLuint *);
extern void GLAPI __glim_GenTextures( GLsizei, GLuint *);
extern GLboolean GLAPI __glim_IsTexture( GLuint);
extern void GLAPI __glim_PrioritizeTextures( GLsizei, const GLuint *, const GLclampf *);
extern void GLAPI __glim_Indexub( GLubyte);
extern void GLAPI __glim_Indexubv( const GLubyte *);
extern void GLAPI __glim_PopClientAttrib( void);
extern void GLAPI __glim_PushClientAttrib( GLbitfield);
extern void GLAPI __glim_BlendColor( GLclampf, GLclampf, GLclampf, GLclampf);
extern void GLAPI __glim_BlendEquation( GLenum);
extern void GLAPI __glim_DrawRangeElements( GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
extern void GLAPI __glim_ColorTable( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_ColorTableParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_ColorTableParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_CopyColorTable( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __glim_GetColorTable( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_GetColorTableParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetColorTableParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_ColorSubTable( GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_CopyColorSubTable( GLenum, GLsizei, GLint, GLint, GLsizei);
extern void GLAPI __glim_ConvolutionFilter1D( GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_ConvolutionFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_ConvolutionParameterf( GLenum, GLenum, GLfloat);
extern void GLAPI __glim_ConvolutionParameterfv( GLenum, GLenum, const GLfloat *);
extern void GLAPI __glim_ConvolutionParameteri( GLenum, GLenum, GLint);
extern void GLAPI __glim_ConvolutionParameteriv( GLenum, GLenum, const GLint *);
extern void GLAPI __glim_CopyConvolutionFilter1D( GLenum, GLenum, GLint, GLint, GLsizei);
extern void GLAPI __glim_CopyConvolutionFilter2D( GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glim_GetConvolutionFilter( GLenum, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_GetConvolutionParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetConvolutionParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetSeparableFilter( GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
extern void GLAPI __glim_SeparableFilter2D( GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
extern void GLAPI __glim_GetHistogram( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_GetHistogramParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetHistogramParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_GetMinmax( GLenum, GLboolean, GLenum, GLenum, GLvoid *);
extern void GLAPI __glim_GetMinmaxParameterfv( GLenum, GLenum, GLfloat *);
extern void GLAPI __glim_GetMinmaxParameteriv( GLenum, GLenum, GLint *);
extern void GLAPI __glim_Histogram( GLenum, GLsizei, GLenum, GLboolean);
extern void GLAPI __glim_Minmax( GLenum, GLenum, GLboolean);
extern void GLAPI __glim_ResetHistogram( GLenum);
extern void GLAPI __glim_ResetMinmax( GLenum);
extern void GLAPI __glim_TexImage3D( GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_TexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
extern void GLAPI __glim_CopyTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
extern void GLAPI __glim_ActiveTextureARB( GLenum);
extern void GLAPI __glim_ClientActiveTextureARB( GLenum);
extern void GLAPI __glim_MultiTexCoord1dARB( GLenum, GLdouble);
extern void GLAPI __glim_MultiTexCoord1dvARB( GLenum, const GLdouble *);
extern void GLAPI __glim_MultiTexCoord1fARB( GLenum, GLfloat);
extern void GLAPI __glim_MultiTexCoord1fvARB( GLenum, const GLfloat *);
extern void GLAPI __glim_MultiTexCoord1iARB( GLenum, GLint);
extern void GLAPI __glim_MultiTexCoord1ivARB( GLenum, const GLint *);
extern void GLAPI __glim_MultiTexCoord1sARB( GLenum, GLshort);
extern void GLAPI __glim_MultiTexCoord1svARB( GLenum, const GLshort *);
extern void GLAPI __glim_MultiTexCoord2dARB( GLenum, GLdouble, GLdouble);
extern void GLAPI __glim_MultiTexCoord2dvARB( GLenum, const GLdouble *);
extern void GLAPI __glim_MultiTexCoord2fARB( GLenum, GLfloat, GLfloat);
extern void GLAPI __glim_MultiTexCoord2fvARB( GLenum, const GLfloat *);
extern void GLAPI __glim_MultiTexCoord2iARB( GLenum, GLint, GLint);
extern void GLAPI __glim_MultiTexCoord2ivARB( GLenum, const GLint *);
extern void GLAPI __glim_MultiTexCoord2sARB( GLenum, GLshort, GLshort);
extern void GLAPI __glim_MultiTexCoord2svARB( GLenum, const GLshort *);
extern void GLAPI __glim_MultiTexCoord3dARB( GLenum, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_MultiTexCoord3dvARB( GLenum, const GLdouble *);
extern void GLAPI __glim_MultiTexCoord3fARB( GLenum, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_MultiTexCoord3fvARB( GLenum, const GLfloat *);
extern void GLAPI __glim_MultiTexCoord3iARB( GLenum, GLint, GLint, GLint);
extern void GLAPI __glim_MultiTexCoord3ivARB( GLenum, const GLint *);
extern void GLAPI __glim_MultiTexCoord3sARB( GLenum, GLshort, GLshort, GLshort);
extern void GLAPI __glim_MultiTexCoord3svARB( GLenum, const GLshort *);
extern void GLAPI __glim_MultiTexCoord4dARB( GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
extern void GLAPI __glim_MultiTexCoord4dvARB( GLenum, const GLdouble *);
extern void GLAPI __glim_MultiTexCoord4fARB( GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
extern void GLAPI __glim_MultiTexCoord4fvARB( GLenum, const GLfloat *);
extern void GLAPI __glim_MultiTexCoord4iARB( GLenum, GLint, GLint, GLint, GLint);
extern void GLAPI __glim_MultiTexCoord4ivARB( GLenum, const GLint *);
extern void GLAPI __glim_MultiTexCoord4sARB( GLenum, GLshort, GLshort, GLshort, GLshort);
extern void GLAPI __glim_MultiTexCoord4svARB( GLenum, const GLshort *);
extern void GLAPI __glim_LockArraysEXT( GLint, GLsizei);
extern void GLAPI __glim_UnlockArraysEXT( void);
extern void GLAPI __glim_ArrayElementEXT( GLint);
extern void GLAPI __glim_ColorPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glim_EdgeFlagPointerEXT( GLsizei, GLsizei, const GLboolean *);
extern void GLAPI __glim_GetPointervEXT( GLenum, GLvoid* *);
extern void GLAPI __glim_IndexPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glim_NormalPointerEXT( GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glim_TexCoordPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glim_VertexPointerEXT( GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
extern void GLAPI __glim_DrawArraysEXT( GLenum, GLint, GLsizei);
extern GLboolean GLAPI __glim_AreTexturesResidentEXT( GLsizei, const GLuint *, GLboolean *);
extern void GLAPI __glim_DeleteTexturesEXT( GLsizei, const GLuint *);
extern void GLAPI __glim_GenTexturesEXT( GLsizei, GLuint *);
extern GLboolean GLAPI __glim_IsTextureEXT( GLuint);


extern void GLAPI __glim_MipsVertex2fv(const GLfloat *);
extern void GLAPI __glim_MipsVertex3fv(const GLfloat *);
extern void GLAPI __glim_MipsVertex4fv(const GLfloat *);
extern void GLAPI __glim_MipsVertex2fvFast(const GLfloat *);
extern void GLAPI __glim_MipsVertex3fvFast(const GLfloat *);
extern void GLAPI __glim_MipsVertex4fvFast(const GLfloat *);
extern void GLAPI __glim_MipsVertex2fvFastest(const GLfloat *);
extern void GLAPI __glim_MipsVertex3fvFastest(const GLfloat *);
extern void GLAPI __glim_MipsVertex4fvFastest(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex2fv(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex3fv(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex4fv(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex2fvFast(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex3fvFast(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex4fvFast(const GLfloat *);
extern void GLAPI __glim_MipsNoXFVertex2fvFast2D(const GLfloat *);
extern void GLAPI __glim_FastColor3ub(GLubyte, GLubyte, GLubyte);
extern void GLAPI __glim_FastColor3ubv(const GLubyte *);



#endif /* __g_imfncs_h_ */
