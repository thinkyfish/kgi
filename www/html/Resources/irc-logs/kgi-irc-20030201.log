<Foske> heh, finally I got the log working
<philbo> great stuff Foske
<Foske> anything you say now will be in the official kgi log :-P
<bughunter> foSke: Time to invite the people? :)
<bughunter> foSke: I guess, you know, what I mean.. :)
<philbo> look at quiet it is after that anouncement :-)
<philbo> s/at/at how/
<Foske> :)
<Foske> oki
<skids> bughunter: Yeah, I get bounces, too.  So we'll have to find Parish (I think that was his name) and find out why the account got nixed.
<Foske> philbo: had some trouble reading the BitchX docs how to get logging enabled
<skids> Very inconvenient time for the GGI ml to go down :-(
<bughunter> skids: I already informed irish.
<bughunter> skids: But still no answer from him....
<skids> Right, Irish, that was it.
<neiljp> what just happened? (other than .debs)
<neiljp> (for ggi)
<skids> Well, lately I've just been fixing/enhancing minor things, so nothing drastic.
<skids> (And working on KGI targets, but since there's no .deb yet for KGI that's less pertanant to fresco)
<skids> meiljp: I did put the TIDYBUF stuff into the devel CVS for X, so that mouse cursor slowness could be fixed now.
<philbo> I so want to have kgi debs. But I don't have the time required to read even a fraction of debian policies and understand their tools...
<neiljp> philbo: maybe you want to speak to 'may' ;)
<philbo> hrm. may :No such nick/channel.
<skids> I think we should hold off anyway until we can give a stable console environment.
<neiljp> philbo: the ggi .deb-er
<neiljp> skids: there is no 'slowness' wrt the mouse-pointer, just no pointer ;)
<philbo> skids: well at least people could see that it does *something*.
ωνω mitchell_ [~mitchell@dsl231-055-100.sea1.dsl.speakeasy.net] has joined #kgi
<bughunter> hi
<skids> philbo: I dunno, I think having a .deb at this point would cause people's expectations to be rasied too high.
<mitchell_> hey folks, I'm just here to camp if nobody minds.
<bughunter> mitchell_: Your "camping" time comes *just* right. :)
<philbo> skids: I think we're getting to the point where we need people to get interested and help out. I'm more than willing to answer all newbie questions
<skids> mitchell_: np.
<mitchell_> hmm, cool.
ωνω philbo_ [phil@HSE-Ottawa-ppp237685.sympatico.ca] has joined #kgi
<philbo_> stupid xchat crashed on me.
<bughunter> mitchell_: When you follow the discussion - the next hours in particular - you don't sorry it. :)
<mitchell_> My hidden motive is that I want to learn more about graphics progamming in linux.
<mitchell_> what's the relationship between kgi and ggi?
<philbo_> here's one for a FAQ
π bughunter starts inviting people now.
<mitchell_> :)
<philbo_> mitchell_: ggi is the userspace library for kgi (though it can do a lot more)
<mitchell_> That's what I figured.
<skids> philbo: WRT AGP, I guess we have a choice of either mapping AGP sections entirely out of the AGP space when a process is not focused, or just making sure no other processes invoke commands that touch that AGP mapping (this is beside the subject of revoking the mmap for committed buffers, of course.)
<neiljp> well, I'd say the reverse ;) kgi is one 'target device' for ggi :)
<skids> philbo: I guess the former is more appropriate, but I don't know how CPU consuming that would be.
<philbo_> mitchell_: kgi has a concept of accelerator pipes though which the userspace programs can safely send commands to the graphics card. But for the sake of sanity the commands are graphic card specific. So to make it actually useable we need to have userspace library that knows the different cards and sends the right commands. libggi has a very cool concept of acceleration libraries which get dynamically loaded and in case of kgi know what command
<philbo_>  send through the pipe
<philbo_> neiljp: this is #kgi, we always twist things our way. For instance, fresco is one of window environments that can run on kgi :-)
<neiljp> philbo_: fresco runs on kgi?! first I knew ;)
π neiljp grins
<philbo_> skids: I think we should not touch the gart after the initial setup
<philbo_> neiljp: well, I don't think anyone has tried yet, but if it runs on other ggi targets I don't see any reason why it shouldn't
<skids> philbo_: well, the linux API does seem to be set up to map stuff in and out.
<philbo_> skids: I think it would be way to expensive and I wouldn't be surprised if we encountered hardware bugs along the way
<neiljp> philbo_: oh sure, I just meant that fresco runs on ggi, ie. that's the api it sees ;)
<bughunter> ok, the linux folk was not that easily to make curious about kgi, when saying KGI has been redesigned and rewritten from scratch. Ok, I also said, the IRC meeting starts in about 150 minutes, so we will see... :)
<skids> philbo_: and to take the contrarian position, not removing stuff from the GART will require us to do more expensive proofreading of buffers before allowing them to pass to the hw.
π bughunter starts inviting the bsd folk
<philbo_> neiljp: hehe right, well, we're *extremely* kgi centric here :-)
<neiljp> philbo_: oh, really? I hadn't noticed ;D
π neiljp wonders why the channel is called #kgi... ;)
<skids> philbo_: and as far as expense, I guess we're only talking about doing it during VC switch.
<philbo_> skids: I don't understand. How does a vc switch come in play there?
<bughunter> I got only one quick reply from #debian. Namely a question, if KGI does ANYTHING ... :)
<skids> If the card has an accel buffer owned by process A, and a VC switch occurs to process B's focus, then unless we map out the GART mapping for process A's buffers, they are accessible by process B through the GPU (again unless we do extensive editing of the command stream)
<skids> Same reason why we should be setting all VRAM to 0 during vc switches.
<philbo_> skids: yikes. that will require some serious pondering.
<skids> Yeah, well, the security aspect is part of the KGI charter which we've been totally ignoring, IMO.
π mitchell_ tries to figue out how long from now 150 minutes is.
<philbo_> skids: well the thing is that you'd only get access to the other process' agp space which is not as big a deal. We should stay true to the charter though
<philbo_> mitchell_: about 150 minutes :-)
<skids> I think we should for now avoid the idea that we can "save" on unmap/map operations by somehow protecting unused portions of AGP/VRAM, and start with a design where all state is cleared on vc switch.  It's expensive, but simpler on the brain at this stage of development.
<skids> philbo: Not a big deal unless that AGP space has a nice nude photo of Carmen Electra in it :-)
<bughunter> mitchell_: In which channel are you present? :)
<philbo_> skids: right, we wouldn't want a rouge applications adding some unappropriate appendages to pictures in a picture viewer :-)
<skids> philbo_: even better :-)
<Foske> why do you guys discuss AGP BEFORE the meeting :)
<skids> Out of boredom, actually :-)
<mitchell_> I'm on debian, redhat, lad, ggi and kgi
<skids> Besides, you;re already logging, so you can cut a few "pre-show" bits from the log before the meeting.
<philbo_> as for the meeting, I think we should start with the stuff that can be decided the fastest and progress to the more drawn out subjects. I.e., AGP the last. That way we might actually accomplish something.
<skids> philbo_: sounds like a plan to me.
<Foske> indeed :)
<Foske> we should start with issues that need to be fixed to attract users
<mitchell_> Oooh, attracting users.  I can speak to that.
π mitchell_ is a lUSER.
<Foske> :)
<philbo_> mitchell_: cool. what attracted you? (so that we know what to do more)
<skids> How about attracting lots of young female teenage users?  :O)
<philbo_> lol
<mitchell_> How about attracting Carmen Electra
<Foske> the keymapping issue, the deadlocks in the accellerator, the SMP issues
<mitchell_> philbo_: The fact that you guys actually have people on your IRC channel!!!
<skids> "Crayon Electra" <-- what they called her in the Battlebots pit.
<Foske> the restoring previous console on closing a console
<skids> (Cause "she's not the sharpest pencil in the box")
<philbo_> skids: ahahaha
<Foske> redrawing a console when taking over 
<philbo_> Foske: I'll try to make a list
<Foske> philbo: see kgi-wip.sourceforge.net/news.html
<philbo_> Foske: ok. I got some more of my own.
<Foske> oki
<Foske> and an important issue: snapshots, releases
π bughunter invited the free/open/netbsd folk.
<bughunter> Let's see what will happen...
<neiljp> hmm,  how soon is it now?
<neiljp> 2 hours?
<Foske> yup
<neiljp> ok, well, I'm logging-off soon, so I might catch y'all then :)
<mitchell_> You know, I really like the framebuffer 'mmap' style of programming, but I don't know how I could get blt acceleration.
<skids> Well, if we're going to be looking to do snapshots/releases/debs we'll have to address the keymap and linux VT emulation stuff, so we don't barf everywhere when the user's init scripts run loadkeys.
ωνω soren [~blef@12-228-148-17.client.attbi.com] has joined #kgi
<skids> mitchell_: direct mmap of the FB is overused and overrated, for various reasons:
<mitchell_> oh I'm glad I'm here to hear this.
<skids> 1) if you're not working through a library, then you have to make all your code alter it's behavior based on the pixel format and pixel layout of the fb.
<Foske> michell_: GGI provides blt accelleration and framebuffer access, but framebuffer access is not needed, though many people shout they want it
<Foske> ah, see skids :)
<skids> 2) If you do work with accels, you have to be sure not to draw under unfinished accels.
<skids> 3) You tend to rely on stuff that's not portable.
<bughunter> soren: Welcome to the KGI world.
<philbo_> skids: very true. Often working directly on the framebuffer is more expensive than doing the stuff in the ram and then dma blitting it. Write's are slow and overdraw is a killer.
<skids> 4) You don't bother to make the application capable of doing screen redraws, so it's very hard to port to a windowed environment.
<skids> And probably some other good reasons I've missed.
<mitchell_> Those are all very good reasons.
π bughunter got a suggestion from a #openbsd guy why not going to #freenode and asking for a wallops announcement...
<bughunter> that would catch _ALL_ channels!
<mitchell_> What if I want to write something for myself though and don't care really if it's portable or if it works nicely in a windowing environment.
<philbo_> bughunter: don't overdo it. The discussion is meant to be technical, we don't want it to be flooded by 'what is kgi' questions
<cow> bughunter, that'd be a bit overdone, don't you think?
<bughunter> cow: Sure. Was just an idea from an #openbsd guy.
<bughunter> You know, #openbsd guys tend to make things *sure* :)
<skids> mitchell_: Ah, I knew I was missing the most important of all reasons not to directly use the fb: because instead of coding all those little subroutines you'll need, you could be enhancing a common code base (like GGI) that does it.
<mitchell_> skids: Furthermore, I use a very old computer and am constantly concerned that "portable" programming is going to make programs unportable to my machine, because it's old and slow, and there is always some overhead involved in portability.
<neiljp> hmmm, but it might be a good idea for a irc net: have a bot which lists official events (meetings)
<mitchell_> skids: That is an extremely good reason.
<skids> mitchell_: well, hopefully you will find GGI to be modular enough to keep your app's memory profile down.
<bughunter> soren: In our meeting, that starts in about 2 hours, we will discuss about AGP and DMA transfers. Could you provide us with some ideas, how to do them in a *portable* fashion cross along many different OS's, please?
<bughunter> mitchell_: No. Portability doesn't not necessarily mean slow.
<bughunter> mitchell_: Have a look into this: http://derbian.org/pppoe/
<mitchell_> bughunter: ok.
<bughunter> mitchell_: It has nothing to do with graphics, but it shows, that NetBSD, which is intended to be *extremely* portable, is NOT slow...
<mitchell_> I see.
<bughunter> mitchell_: The trick is to do things right. :)
<mitchell_> bughunter: as always :)
<bughunter> mitchell_: soren here is a NetBSD guy, in case you have some (deeper) questions about it.
<soren> bughunter: I'm not a netbsd developer, though :)
π skids will return in about an hour.
<soren> I may be able to answer questions, but don't count on it
<mitchell_> cool.  Thanks for talking to me man.
<bughunter> soren: can you take over some more (net)bsd guys to join in here? :)
<bughunter> soren: ... to fill in your lacks ... :)
<Foske> the accellerator code in the actual drivers for instance, uses some pointers where it can find the data it needs. the underlying OS layer makes sure those pointers point to something valid. this can be done very fast, and is very portable. 
ωνω testuser_ [~testuser@HSE-Sherbrooke-ppp121892.qc.sympatico.ca] has joined #kgi
<Foske> portability usually means: use a lot of pointers :-)
<soren> bughunter: btw, in response to your DMA/AGP transfer portability thing. isn't that a non-issue because the core is supposed to be operating system dependent?
<bughunter> foSke: ... or #defines :)
<Foske> the entire design of GGI is based on a fantastic usage of pointers
<Foske> hunty: your nick completion lags :)
<bughunter> soren: It is an issue, because we need an interface, which a) abstracts the dependent OS code and b) it shouldn't cause too much overhead.
<Foske> soren: the core is OS dependant, but to the kgi driver side, we need an abstraction
<bughunter> soren: Also note, that different OS's uses different API's and different mechanisms.
<Foske> we got the kgi core, which translates OS related issues to the generic KGI API. The actual drivers all use this API. 
<bughunter> foSke: I just do tab completion as I do on the shell. :)
<philbo_> meeting topics: http://www.student.math.uwaterloo.ca/~fspacek/meeting.txt
ωνω [Users(#kgi:13)] 
[ testuser_ ] [ soren     ] [ philbo_   ] [ mitchell_ ] [ neiljp    ] 
[ Foske     ] [ ekix      ] [ popel     ] [ bughunter ] [ golbez    ] 
[ skids     ] [ philbo    ] [ cow       ] 
<Foske> philbo: in that order ?
<soren> right. you might benefit from looking at netbsd's dma interface
<bughunter> philbo_: Third line: "borken" ?
<philbo_> bughunter: 1337 speak
ωνω anaki [lyc@terrato.org] has joined #kgi
<philbo_> Foske: more or less. Feel free to suggest rearrangements
<bughunter> soren: I did: http://kgi-wip.sourceforge.net/documentation.html
<bughunter> soren: I just don't know, if the other people do.
<bughunter> s/do/did/
<soren> ah. my mistake. didn't look at the web page.
<bughunter> wow, I am no longer at the top of the user channel list.
<bughunter> :)
<philbo_> bughunter: we're not quite there yet. there are so many other things to fix before tackling dma
<bughunter> ah... now we have an openbsd guy here.
π bughunter awaits nsouch
<bughunter> then we have a guy from freebsd here, too. :)
<Foske> philbo: the memory leak in the accel code. donnow if that is Gx00 related, though
<Foske> and switching console crashed the accel system on my Gx00 SMP system. donnow if it is Gx00 or SMP related, or both, or neighter
<philbo_> Foske: I'll add it to the list. (I'm suspecting that it might be related to our not maitaining the resource usage statistics properly more than actually leaking memory. i.e. top's memory useage includes mmaped memory)
<Foske> philbo: my "fix" of the fast_ procedures might not be perfect, was a mail from rodolphe about it on the list
<cow> i'm not opposed to drop fast_, but i (currently) do not see why it would buy us, fwiw
<philbo_> cow: maintainability?
ωνω neiljp is now known as neiljp_offline
<neiljp_offline> hopefully be back later to eavesdrop :)
<philbo_> Foske: well the book might say it can't do it, but the source quite clearly shows that the non fast_ versions work just fine.
ωνω SignOff: neiljp_offline (Read error: 104 (Connection reset by peer))
<cow> philbo, you mean cutting down lines of code? that one for sure. apart from that (non-issue, imho) not much. contrarily it does a in my mind superfluous addition locking-pair. *shrug*
<Foske> cow: for we reinvented the wheel, made messy code of it that caused crashes on SMP systems
<cow> philbo, as said, ok with me to drop it
<philbo_> cow: the fast_ functions seem to have the greatest density of #ifdefs from the whole graphic.c, I fear that it's not going to get better
<Foske> cow: the code was really outdated and a wonder to work on UP systems
<bughunter> anyone here, who has access to a UP system?
<Foske> philbo: it still used instructions that were more ore less invalid since 2.3
<Foske> bughunter: anyone has when you compile your kernel without SMP support
<bughunter> foSke: :)
<philbo_> at any rate. Let's make the decision during the actual meeting to give other people a fair chance to object to it.
<cow> philbo, '- libggi's kii target' libg_g_i? haven't seen that one, what was it?
<Foske> I object to any objections :-P
<cow> philbo, sure
<philbo_> cow: err. damn all those i's and g's. Fixed :-)
<philbo_> wonders how to get rid of philbo
<bughunter> philbo_: When you are about it, you can fix the "borken" spelling... :)
<cow> /kill
<philbo_> bughunter: no. It makes me feel cool.
ωνω You can't do that, you're no deity 
<bughunter> :)
<philbo_> cow: /kill doesn't work. Apparently I'm no deity. (now that one is new to me :-)
<Foske> lol.. radeon driver needs lots of work.. the ViRGE driver even more
<cow> bughunter, btw, your so called fix to configue in ggi-core which was s/k.i64_t/__k.64_t/ doesn't sound proper to me. that one should be fixed for real and not bypassed
<cow> bughunter, but that is just me nitpicking
<Foske> oh, and the NVidia driver....
<philbo_> we should drop it out of principle
<bughunter> cow: Do you mean of libgii or libggi?
<cow> Foske, yeah that one needs adjusting to the current cursor API. gimme hardware and i'd think about looking at it ;)
<Foske> cow: the NVidia one ?
<Foske> I can hand you some S3 hardware
<cow> Foske, TNT2. i won't spell out that company loudly. especially not here
π philbo_ traded his TNT for a Rage128. Not that I have time to write a rage 128 driver of course :-)
π Foske puts some TNT under the companies main building
<bughunter> *boom*
<bughunter> ooops
<Foske> HE DID IT !
π Foske got it on log...
<bughunter> sorry, didn't intend to kill you guys. :)
<bughunter> pretty quiet here, suddenly...
π Foske is cleaning up the mess buggyhunted made
<cow> another point i like to hear peoples opinion is w.ether we should strive to build in drivers or not
<Foske> ?
<philbo_> cow: That would be nice for sure. I don't know how much of a priority it is though.
<cow> Foske, what was so cryptic about that one]. should we provide the possibility to have drv/ not only modular but built-in?
<cow> philbo, i don't know either. tell me :)
<philbo_> cow: how much work do you think it would be?
<cow> philbo, not too much i think. i'd look at it mid-term, though as it is not too appealing todo and my sparetime is rather limited currently
<philbo_> cow: I suspect that just getting it to work woudl be fairly doable, but getting it to work right would be quite hard (adjusting the build system and the kgi core)
<Foske> I was just working out ideas to make it much more modular :)
<cow> philbo, the buildstuff is trivial, the core is more involved, agreed.
<Foske> oh, and we need more drivers too :)
π cow starts a build to test if the crt driver works proper for self
<Foske> and kgi should work on non-intel linux too
<philbo_> Foske: I would like to do that one if I had a non intel box
<bughunter> foSke: porting kgi over to netbsd would quickly open kgi to many hw-archs... :)
<cow> and some should donate a nice non-intel box to cow, yeah ;)
<Foske> sorry, my G4 and G3 are not for donation
<philbo_> Foske: I guess you'll have to do the work then ;-)
<bughunter> neither my G4
π bughunter awaits nsouch
<cow> selfish human beings wherever you look :P
<bughunter> nsouch said, there were two donations for the kgi project.
<bughunter> a mach64 and one another graphic card.
<Foske> philbo_: willing to do that, though dpy-powermac.c will be a though one
<philbo_> Foske: is that just an ATI card or something fancier?
<bughunter> foSke: dpy-macintosh is more generic. :)
<Foske> and I have no clue how kii should link to the keyboard drivers
<Foske> I don't want to make the same mess of it as the ps/2 keyboard driver is
<Foske> philbo_: the oldworld G3s use onboard Mach64s
<bughunter> And the current Apple iBooks comes with a Rage128.
<Foske> newworld G3s ship with normal AGP Rage128s. G4s ship with Nvidia Geforce or ATI Radeons
<philbo_> Foske: getting the driver working as a boot driver would do it then. Though I can bet you'll have a hell of a time getting it to work on a big endian system (unfortunately when I wrote it I had hard enough time just getting it to work without worrying about endianess)
π bughunter has a ATI Radeon Mobility 7500 in his PowerBook
π philbo_ has a rage128
<bughunter> The latest PowerBooks come with a ATI Radeon Mobility 9000 Pro.
<Foske> usually fixing endianness is mostly fixing a bit in the pci config space and some chip specific bits
<bughunter> And the latest PowerMacs come with a NVidia GeForce 4 MX or GeForce Ti 4
<bughunter> foSke: I think, anything that has to do with pci or agp space should go into a bus actraction.
<Foske> if only the register access is correct: framebuffer endianness errors are easy to find in 32 bit mode :)
<bughunter> foSke: Note, as soon as someone comes up with porting kgi to a OS running on a sparc machine, for example... there's no pci nor a agp bus.
<bughunter> foSke: Sparc machines have the sbus.
<bughunter> foSke: and the upa bus for graphics (133MHz CPU <-> GPU connection)
<bughunter> foSke: You see to not bloat the kgi drivers with code accessing the bus space, we need an bus abstraction.
<bughunter> foSke: I think, NetBSD's bus abstraction layer is what we want.
<Foske> ok, then implement it
<bughunter> foSke: All what we need to handle are two cases:
<bughunter> foSke: a) the driver searches its card by searching through the bus space (that's the way linux and windows goes)
ωνω nsouch [~nsouch@nas-cbv-8-62-147-159-172.dial.proxad.net] has joined #kgi
<bughunter> foSke: b) the bus driver finds the card and the driver gets loaded.
<cow> wnsouch, olla
<bughunter> nsouch: hi
<nsouch> hi there
<Foske> hi nsouch !
<bughunter> nsouch: may I introduce anaki (OpenBSD representant) and soren (NetBSD representant) ?
<bughunter> foSke: b) is the way, *BSD go.
<nsouch> Nice to meet them
<nsouch> anaki: have you heard about the french guy working on openbsd port?
<bughunter> nsouch: you mean soyt?
π bughunter wonders, where soyt remains...
<bughunter> skids: please don't ask on which display... ;-)
<nsouch> no, I'm looking for his name...
<bughunter> nsouch: you mean soyt's real name?
<nsouch> yes
<bughunter> nsouch: Eric Faurot
<nsouch> Exactly! So, he's soyt, ok.
<nsouch> anaki: are you in touch with him?
<cow> nsouch, he is used to hangout on this ircnetwork in #ggi
<bughunter> cow: no, when soyt joins this irc network, he joins in #ggi AND #kgi
<cow> members.aon.at/berny_f/kgi/kgi-0.9-buildsys_cleanup-O2-20030201-0.diff
<cow> some linux-guy willing to test if that cleanup does no b0rk the build?
π philbo_ goes give it a try
<cow> oh, and if there is someone who is aware how one  sanely  extracts cflags i would be glad to hear about it
<bughunter> nsouch: how much people are now actually working on KGI/FreeBSD?
<philbo_> cow: touch: creating `init/blErg.c': No such file or directory
<nsouch> shall I answer? /me for code, pedro for advocacy
<cow> philbo, hm. does blErg.c exist after it? if so i would tend to just 2>/dev/null touch there
<nsouch> bughunter: there's no bug to hunt, but anyone can join :)
<philbo_> cow: it's there. .o as well.
<cow> k
<philbo_> cow: that's a pretty evil way of getting the flags :-)
<cow> philbo, after configure, does drv/display/.config have proper ..OPT_TARGET?
<cow> philbo, potentially fragile, but i assume it is good enough for any linux-2.4. in 2.5 we (i) just patch a spitout_those_damn_flags target in kbuild, which is much more nice imho
<philbo_> cow: it says only -D__MODULE__ (that doesn't sound enough)
<cow> philbo, that won't work, yes. oh joy.
-MysticOne- mysticone@mysticone.staff.freenode [GlobalNotice] Good day, everybody.  My apologies for sending this as a notice, but we felt it was important enough to let everyone know.  Freenode Radio is currently on the air, and is re-broadcasting CSPAN coverage of the Columbia accident today.  If you're interested in tuning in, point your media player to http://stream.wopn.org:10000/modem.ogg or http://stream.wopn.org:10000/broadband.ogg
<skids> additional topic in the medium category: general gripes or ideas about the build system
-MysticOne- mysticone@mysticone.staff.freenode [GlobalNotice] Further messages regarding this stream will be given over wallops.  If you'd like to receive them, simply make sure your client is +w, otherwise -w.  Thanks for your time.
<philbo_> skids: I fear that one might deteriorate into "do it cow", which wouldn't be fair
<cow> skids, .. including putting the chipset specifics to ggi's include hierarchy
ωνω soren [~blef@12-228-148-17.client.attbi.com] has left #kgi "sorry, had to run"
<philbo_> cow: yeah that one is definitely needed but seems just impossible
<Foske> accel: memory mappyng versus block copy. the latter is faster in most cases
<Foske> mapping too
<bughunter> skids: Did you read the bus space stuff, I said above?
<cow> philbo, hm? we would just have an install target (st like make all install) which would make all "drivers" and put the necessary includes to where we agree they belong, nack?
<bughunter> nsouch: soyt is currently busy with reworking the GGI site.
<philbo_> Foske: that's the big question I guess. It's full of trade-offs and we need some hard evidence about exactly what the speed difference is
<cow> philbo, (guess who would be the only idio^Wvolunteer to do the install stuff. hrmpf)
<bughunter> nsouch: You can visit the new site (which is not ready yet) at: http://users.info.unicaen.fr/~faurot/ggi/
<skids> bughunter: I think we need to meet the challenge of getting it to work on i386 first, then worry about bus abstraction. It's too soon for that, unless someone drops fully working code right in our laps.
<philbo_> cow: Hrm. yeah, I guess that would work. For some reason I was always thinking up ways of coordinating the ggi and kgi trees to pull the header but I guess installing it would work just fine
<Foske> philbo: it is, cause Linus said so :-P
<Foske> philbo: well, it might automagically be the solution to our memory leak
<philbo_> Foske: Linus also said that kgi sucks (or rather ggi as it was called at the time) :-)
<skids> Foske: That's just because you are using small chunks.
<philbo_> cow: do you have some sort of introduction about the whole architecture of the build system? I'm personally quite lost in it. I'd be willing to help out a bit with some direction (even though my sed skills are definitely lacking)
<cow> philbo, coordinating the kgi an dggi tree does work today already.. just configure ggi --with-ectra-includes="path/to/kgi/include:path/to/kgi/drv/display/chipset/*/" is enough for freestanding. an installed base might be more easy to handle for casual builders, i guess
<cow> philbo, s/ectra/extra/ of course
<nsouch> bughunter: simple and nice, I like it.
<Foske> skids: indeed. in 2.5 kernels, you flush the entire cache system, while a block copy automatically flushes only the small block used
<Foske> this is aparently a very huge gain
<cow> Foske, you have to flush the whole mm there, yes. sucks big time, imo
<Foske> cow: sucks bigtime, though the reasons are good
<Foske> (flushing only a part was nothing faster)
ωνω SWAP: Window 1 is not hidden!
<cow> Foske, stupidity and conveniance dumbass attidu_d_e never was a good reason in my eyes, but ok. futile to argue about it anyways
<skids> Foske: May make sense to implement that for short accel groups.
<philbo_> Foske: flushing cache is a noop on intel
<Foske> huh ???
<skids> Perhaps it would help if we knew where the break-even point between flushing the tlb and # of blocks block-copied.
<skids> s/./was./
<Foske> that inv* instructions aren't exactly noops
<cow> philbo, no. flushing the tlbs is very expensive
<philbo_> Foske: intel's cache is smart enough (just grep include/asm-i386/pgtable for flush_cache). tlb's are a different thing though.
<Foske> skids: that break even point depends on cpu speed, bus speed, memory bus width...
<skids> Anyway, t- 15 minutes and counting, so let's save this discussion for the meeting.
<skids> Foske: I think we owe it to do both, whichever is faster.
<philbo_> skids: we are definitely on the wrong side of the break-even point as for the size of our accel buffers every operation is done entirely in cache
<Foske> really an eager to find that leak
<cow> as a sidenote before the official fun starts, i think iff we would split the graph device in two, we could make the easy --non-accel-- part through macros, fwiw
π cow feels stupid to repeatedly express thos obvious crap, but anyways
<philbo_> cow: I don't get it. What part though what macros from where?
π bughunter expects ortalo, soyt and t0dd joining in soon.
<cow> erm, /part/part os independant/
<golbez> what time do we start dudes
<Foske> 10 minutes
<cow> golbez!
<Foske> from now
<bughunter> golbez: hi
<philbo_> hi golbez
<golbez> hello
<golbez> 10 minutes.. I thought I had an hour.  No beer for me :(
<bughunter> golbez: though foSke is already logging for about two hours... :)
<philbo_> cow: I see. yes, we could. The ping-pong nastiness would be quite separate which would make the porting much easier. I'm even toying with the idea of using the standard write interface to write to the accel pipe
<Foske> stoopid log has ANSI codes in it... thanks BitchX :)
<golbez> bughunter: Iθ have been logging for about 4 months...
<bughunter> golbez: are you kgi's IRC bot?
π bughunter tries
<bughunter> !pizza 5
<cow> bughunter, please... will ya?
<Foske> :%/^*m//g
<Foske> eh
<Foske> :%s/^*m//g
<bughunter> lol
<cow> philbo, if nothing else, it would make porting easier for nsouch
<cow> philbo, are there any reasons against using the generic write intercafe?
π cow grins
<cow> interface
ωνω ortalo [ortalo@pppport12.laas.fr] has joined #kgi
<bughunter> ortalo: hi
<Foske> welcome Rodolphe, glad you could make it
<ortalo> Hello everyone.
<bughunter> ortalo: you here on *the* minute.
<Foske> still missing soyt and t0dd maybe ?
ωνω [Users(#kgi:14)] 
[ ortalo    ] [ nsouch    ] [ anaki     ] [ testuser_ ] [ philbo_   ] 
[ mitchell_ ] [ Foske     ] [ ekix      ] [ popel     ] [ bughunter ] 
[ golbez    ] [ skids     ] [ philbo    ] [ cow       ] 
<bughunter> yes
<bughunter> :)
<philbo_> cow: you don't get a per-mapping context
<Foske> okay. for everyone here already:  http://www.student.math.uwaterloo.ca/~fspacek/meeting.txt for a little agenda
<cow> philbo, hm. that's suboptimal then
<bughunter> philbo_: regarding "crt driver should become default" :
<bughunter> philbo_: Tomorrow, I'll do some more tests with the mach64/crt driver
<philbo_> bughunter: glad to hear that
<Foske> give those lazy guys 5 minutes, or shhall we start ?
<bughunter> philbo_: Maybe, it works, when I start the GGI app from console 1-4.
<bughunter> philbo_: The reported issue happens, when I start the GGI app from console > 5.
<bughunter> >= 5.
<cow> philbo, what does it say if you manually make -f Makefile init/blErg.o ?
ωνω SignOff: nsouch (Read error: 110 (Connection timed out))
<cow> philbo, i'm still intrigued that it doesn't work for you for some odd reason
<Foske> oh nice, connection issues
ωνω nsouch [~nsouch@nas-cbv-7-62-147-155-249.dial.proxad.net] has joined #kgi
ωνω njs [njs@12-232-144-227.client.attbi.com] has joined #kgi
π bughunter didn't notice, that nsouch left.
<ortalo> Testing the crt driver is on my next list of todo things.
<Foske> welcome njs
<Foske> crt driver works almost flawlessly for me
<njs> 'ello.  I'll just lurk, I think.
<skids> Are we started then?
<Foske> ok.
<Foske> donnow if soyt will make it
<Foske> First I want to make compliments about the progress we made in the last months
<ortalo> ok. (someone volunteer to coordinate?)
<Foske> ok.. top of the list: the crt driver
<Foske> is it good enough to replace everything else
<golbez> ιI think so.
<skids> I am fine with the CRT driver being the default, but a few caveats:
<skids> 1) Should be integrated smoothly into build system
<skids> 2) Failure to set valid timing when DDC1 fails on Radeon 
<skids> (valid timing negotaited, but doesn't take)
<skids> 3) DDC2 would be really nice (otherwise people have to power cycle 
<skids> monitors if they run a DDC2 app.)
<Foske> IMHO it is, though we need an option to tell the driver not to do ddc
<bughunter> How does it handle plasma, lcd, tft displays?
<Foske> bughunter: My tft eats the mode just fine
<bughunter> ok
<bughunter> someone here is plasma and/or lcd displays?
<bughunter> s/is/with/
<Foske> though there is a minor issue that I want in future...
<philbo_> skids: 1) assumedly fixed once it becomes default 2) will need to work on that, any help appreciated (i.e., works here)
<Foske> I am working on DDC2. can't do anything more than say that :)
<skids> bughunter: crt will be better on a lcd than the other drivers, because at least it bothers to ask the lcd what it can do, the other drivers just fly off and send what they think is a "standard" mode but the LCD might have a different opinion on that matter.
<cow> a) what was that stuff with reversed order of found modes from monitor? b) who will (? needed?) fix the mode-negotiation loop regarding LOWER/RAISE?
<Foske> A tft has a "preferred mode", for me it is 1280x1024 @ 60 Hz. this is part of the DDC data. this means if the user requests a default mode, the monitor driver should propose it, not the chipset driver
<philbo_> Ok. Since nobody seems to be radically against it, it's agreed on. I volunteer to do the work of getting rid of the rest (should be a good exercise in understanding the build system). Any concerns should be directed to me.
<ortalo> I should really try something different from the SVGA driver for the monitor! ;-)
<bughunter> then the crt driver should have a name sounding more generic like "unimon" or something like that, to not confuse users.
π skids agrees.
<ortalo> bughunter: good idea
<bughunter> I am pretty sure, that user will come and ask "can I use it on my tft?"
π Foske has seen the stars already in 1280x1024 :)
π ortalo Trying an "action"
<philbo_> but they all support crt timings! it's a driver for all display devices that support the crt way of setting display mode
<cow> bughunter, ortalo, i tend to agree with philbo that "crt" does match quite well
<Foske> okay. philbo_ will start the cleanup. what about my comment ?
π ortalo wonders how you can really see the stars at such resolution
<golbez> Does it really matter when the monitor driver is compiled into the display driver.  It is rather transparent to the user...
<Foske> no reactions ?
<cow> i do not see why we should rename a directory (in cvs!) as users are _NOT_ supposed to be bothered with it when it is the default monitor driver.
<philbo_> Foske: I'm for transferring the responsibility for setting the default resolution on TC_PROPOSE from the chipset driver to the monitor driver
<Foske> crt definitely is wrong, but ok. make it general for now ?
<skids> Keeping the dir is fine IMO, just the configure system should call it something other than crt.
<bughunter> philbo_: Independent of the common technical base, user thinks, those are different (because they look different?)
<Foske> it is in the monitor dir already
<skids> As in, the front page menu where you select the driver.
<philbo_> cow: what do you mean by the fixing of the mode negotiation loop
<ortalo> If there is not DDC, can the monitor propose a decent default mode?
<Foske> ortalo: only with parameters about the monitor applied
<skids> ortalo: if you tell it it's limits via insmod.
<philbo_> ortalo: only if you manually specify limits because ther is no decent default that all monitors will support
<Foske> okay, details will follow in a document I'm going to write on the driver.
<cow> skids, the config-system will not provide a choice for selecting the "monitor"stuff anymore. just the boards which have to build (which should be "all" sooner than later anyways; e.g. either fix or hide the TNT2 thing from configure)
<Foske> philbo: can you rearrange the proposal loop while you work on the cleanup ?
<Foske> I'll do the ddc2 stuff asap
<Foske> more comments that need everyones attention ?
<philbo_> Foske: should be trivial, I'll add to your document what change to the chipset drivers is neede (basically only matter of *not* setting the resolution when it is 0,0)
<skids> OK, then the last thing is, what do we do with all those hard-earned timing lists and frequency ranges?
<Foske> philbo: ok
<bughunter> cow: When you are about fixing up the dialog - could you fix it up for 80 column textmodes, please?
<philbo_> skids: there are no hard earned timing lists (the crt driver has the greatest list of all the drivers in cvs), for the range we need a .spec->arg script
ωνω fraggle [~fraggle@tuneless.plus.com] has joined #kgi
<Foske> skids: imho they were crazy from the beginning, for now we could store them somewhere, so we could use them in a user level config tool
<cow> philbo, the mode negotiation currently checks against the monitor if all other subsys already agreed. iirc i locally had to run through four loops to get a (somewhat) proper mode as my crap monitor is limited to a quite low resolution which the other subsys need to be lowered to match
<bughunter> fraggle: hi
<skids> philbo_: I don't know about you, but I spent a good deal of googling trying to get the HP timing list.
<fraggle> hiya
<Foske> philbo: it isn't that easy maybe. has to be checked out.
<skids> That database isn't exactly complete, but it does have some data well worth preserving.
<philbo_> skids: ok. Let's make a script for those too then. (the crt driver has a parameter for specifying extra timings)
<Foske> okay. please keep the database for later use on the command line, but remove everything else not crt-related
<skids> Should the CRT driver have an option to build-in timings, top be used as a boot driver?
<bughunter> fraggle: Which OS/hw-arch do you run?
<cow> ohm and someone should document the module params thoroughly and in depth
<Foske> cow: I will
<Foske> next subject ?
<ortalo> yes (if no one objects)
<Foske> default keymap is broken
π cow listens to ortalo
<philbo_> skids: I suppose, yes. Let's leave that till we can actually use the drivers as boot drivers.
<ortalo> What is this problem? (First time I hear of it I think.)
<Foske> when you compile KGI from scratch, starting an app on ALT-F1 opens a graph that maps to ALTGR-F2
<ortalo> With graphic minor at 0?
π bughunter agrees with skids
<Foske> indeed
<nsouch> Foske: is that keymap related?
π Foske uses /dev/event and /dev/graphics minor 0  for weeks now
<Foske> nsouch: someone here said that, I assumed it was an off by one calculation somewhere
<ortalo> That's a compiled-in keymap? (I usually need to use loadkeys myself before ALTGR works)
π bughunter reminds, that the AT->PS/2 scancode conversion is broken
<Foske> ortalo: yes, the .de keymap actually
<philbo_> from my experiments, it is indeed keymap related. The default keymap has altgr mappings wrong
<skids> philbo: I'm fine with waiting on bootable-crt, too.
<bughunter> kgi still finds two keyboards - one AT and one PS/2
<cow> is minor 0 trusted even on non-devfs systems, btw? if so we should reflect this in cvs....
<Foske> cow: it is trusten completely now
<skids> Is there an opensource "keymap editor"?
<bughunter> though I have physically one AT keyboard connected to ps/2 via an at->ps/2 adapter.
<philbo_> (just did a quick check and pressing altgr-f4 wants to go to console 66, one off)
<Foske> philbo: exactly, that is the issue
<nsouch> where one can find loadkeys by the way?
<philbo_> nsouch: console-tools. Look for it on sourceforge
<Foske> should be 67
<philbo_> Foske: 65 actually
<Foske> no, 64 + 4 - 1
ωνω oxygene [~oxygene@195.227.14.232] has joined #kgi
<bughunter> oxygene: hi
<oxygene> hey bughunter 
<philbo_> Foske: right. My bad.
<Foske> whe need someone to look at this
<Foske> we too
<Foske> I'm lost in the keyboard code...
<skids> philbo_: you and I just made the same thinko.  Scary.
<philbo_> I've done some keycode stuff lately, so I guess I can fix that.
<Foske> philbo_: oh, you can add that to your list ?
<philbo_> Foske: sure. It should be quite easy to fix anyways.
<Foske> next subject then: snapshotting / releasing kgi.
<cow> who will focus on satisfying loadkeys and fixing keymaps as soon as possible? that one really should be top priority, although it is unsexy to fix, granted
<bughunter> Regarding "debian packages, snapshots. too early?":
<bughunter> There are several possibilities:
<philbo_> cow: you mean strings?
<bughunter> a) we go the BSD way: Develop deep changes in a branch and merge it to -current, where -current is the main cvs tree (advantage: main CVS tree is always stable)
<bughunter> b) we make a snapshot, break everything, stable everything, make another snapshot
<bughunter> c) we make a snapshot and open a devel and a stable branch as we do for GGI
π cow nods philbo
<Foske> bughunter hold back a little...
<philbo_> bughunter: that's awfuly involved. We just need something that woudl be easy for people to try. Right now just get a kgi enabled kernel is a pretty major pain.
<nsouch> c)
<Foske> I vote for c for now, and we should have a list what to do before we release a real version
<ortalo> c)
<skids> Debian users pretty much expect .debs to be drop-in and more or less production quality.  At the very least, any .deb package set 
<skids> should create all the device files and deal with any init/config file conflicts like loadkeys.  (Or we could just FIX the loadkeys thing :-)
<cow> c)
<cow> but what about loadkeys? i won't do it.. so any takers?
<Foske> anyone feeling to take this one ? with sourceforge help it should be easy
<skids> c) for me as well.
<skids> Isn't it KGI, not loadkeys, that's broken?
<nsouch> kgi-wip standing for -current, kgi for -stable?
<philbo_> cow: I can look into it, but can't promis anything. Is it really that necessary?
<skids> i.e. Linux VT emulation?
<ortalo> It would be nice to have something like a kgi-kernel Debian package too. But maybe it is a pretty difficult task (that's the kernel).
π golbez thinks c too
<Foske> nsouch: we have no control of kgi tree, but we can abuse the cvs of it as the stable tree, yes
<cow> c) with "stable" and "HEAD" that is. anything else is unacceptable. string-nitpick, though ;)
<skids> ortalo: It is, because to do it right your patch has to be reversable.
<ortalo> skids: why?
<cow> philbo, we really have to fix it asap, yes
<njs> Shouldn't you be keeping both the stable and development trees in a single cvs repo, to make merges easier?
<bughunter> nsouch: We can do so, once steffen is back (at least, when he gave us CVS write access)
<skids> It has to work with make-kpkg utility, which allows you to choose the patch-set.
<Foske> a few of us has write acces, don't they ?
<nsouch> njs: you're right
<Foske> well ok.. single cvs repo
<skids> I could try write access again but last time I did I think my auths were stale or something.
<Foske> kgi-0.9 tree and a kgi-current tree ?
<philbo_> cow: ok. I'll put it higher on my list then.
<ortalo> single cvs repo is probably much wiser...
<cow> skids, i think it is KGI, yes. we need to \"satisfy loadkeys\" e.g. verify and write the fn_string stuff proper, somehow
<cow> philbo, great
<nsouch> Foske: no same repo, same trees
<Foske> okay, volunteers for the cvs tree stuff ?
<nsouch> just tags to maintain branches
<cow> Foske, kgi-0.9 module, branch "stable" and our normal HEAD. i will tag the stable branch, soon, if nobody objects
<Foske> okay. cvs "split" assigned to cow
<cow> ack
<skids> Shouldn't it BE stable first? :-)
<nsouch> note that branch points are needed to track branches
<philbo_> skids: didn't you hear? assigned to cow :-)
<bughunter> For the branch tag we should use a clean namespace to not come into naming conflicts later with multiple branches.
<cow> skids, indeed. that's the 'soon' part :)
<Foske> skids: we should rework some of the core stuff, I don;'t want to do that while we're so close to something stable
<ortalo> Probably... Cow, please, do a full committers roundtable before actually create the tag...
<cow> philbo, heh!
<cow> ortalo, ok
<bughunter> I suggest to use the 'branch_<date>' or 'branch_<version>' scheme for branch tag names.
<cow> bughunter, no
<Foske> veto
<Foske> :-P
<Foske> details have to be worked out later (we got real issues later on, so I want to keep this short now)
<ortalo> I' rather tag with "kgi_0_9" , "kgi_0_9_2", etc.
<Foske> cow will be on it.
<ortalo> Untill "kgi_1_0" of course...
<nsouch> ortalo: yep
<skids> OK, so we make it stable, and then cow tags it stable... next subject?
<Foske> issues that need to be said about this now ?
ωνω neiljp [~neil@du-069-0655.access.clara.net] has joined #kgi
<bughunter> neiljp: hi
<Foske> libggi's kii target needs fixing
<philbo_> the kii issue is kind of selfish, because I need it to have a working xggi on kgi ;-)
<skids> When I added the auto-open of the KII target I found that it will
<skids> open /dev/event twice if GGI_INPUT is also set.  Got to figure out
<skids> how to keep it from doing that...
<neiljp> bughunter: hi
<Foske> bughunter: is this something for you ?
<neiljp> did I miss the entire meeting?
<bughunter> foSke: libggi's ? You mean libgii's kii target.
<njs> neiljp: ongoing
<cow> bughunter, it already is -0.9; that is enough. fix it up for good, combined with a rewrite of hairy parts and we could argue about an kgi-0.10 module, if you really want
<neiljp> cool :)
<Foske> err of course
<neiljp> njs: ta
<Foske> filip made a typo :)
<bughunter> neiljp: no, but you missed the first two topics... :)
<skids> neiljp: We're not even through with the "quick and easy" topics yet! :-)
<bughunter> s/two/three/
<neiljp> skids: ah, damn, I knew I should have been here just for those topics ;)
<Foske> okay, what is the issue with it ?
<philbo_> the kii's target .label field on events is totally bogus
<philbo_> the inspiration for fix should probably come from linux_kbd
<skids> Is that why enter don't work in demo?
<philbo_> skids: could be.
<Foske> cow: oh, don't forget to make some snapshots too :) 
<Foske> anyone on the ggi site that wants to look at it ?
<philbo_> It's a mess but it's the last part of making libggi/libgii fully useable on kgi
<bughunter> philbo_: Or linux_evdev...
π skids thinks we should change the splash screen.
<Foske> bughunters todo list is still empty ? :)
<skids> sorry, random thought there.
<philbo_> bughunter: say, you seem to know a lot about that :-)
<Foske> He wisely became silent
<bughunter> foSke: hehe - no. It is full.
<Foske> bughunter: too full to take this one extra ?
<nsouch> cow: and tags before huge changes
<bughunter> foSke: I am working on targets for macosx/darwin, I am working on libgpf...
<philbo_> well, lets move on. People know about the issue. If anyone has nothing to do at some point in the future, they can look a it.
<Foske> oki
<skids> philbo_: I'll take it.
<nsouch> example from freebsd tree:         RELENG_5_0_0_RELEASE: 1.26
<nsouch>         RELENG_5_0: 1.26.0.2
<nsouch>         RELENG_5_0_BP: 1.26
<nsouch>         RELENG_4_7_0_RELEASE: 1.20.2.1
<Foske> okay. asigned to skids
<philbo_> skids: great
<bughunter> philbo_: Today, I had a deeper look into linux_evdev for improving libgii's input driver for macosx/darwin. :)
<Foske> next subject: restorint previous devices after closing one
<Foske> restoring too
<nsouch> bughunter: don't you have vgl under darwin?
<Foske> after closing a graphical device, it remains displayed
<philbo_> The proposed fix is to just go back to where the app was started from. But what if there is no such device (app started remotely) or it disappears in the meantime (higly unlikely)
<bughunter> philbo_, skids: But I am there, when I get bitten by bugs by libgii's kii... :)
<bughunter> nsouch: no.
<bughunter> nsouch: There's no vgl under darwin.
<skids> I liked the model where each console "slot" had a graphics and a text device associated with it, and when a graphics app terminated it would go back to the corresponding text vc,
<ortalo> skids: I second this behavior.
<skids> you could switch between graphics/text with another key (maybe ALT-ESC) and the system remembered with mode (graphics or text) each slot was in.
<skids> s/with/which/
<skids> However, as philbo pointed out, we need to think about how this would
<skids> work in each of the various configurations multi-head can assume.
<philbo_> skids: even if the graphics device opened doesn't correspond? I can open /dev/graphic4 from console 1. Would that thow me back to the login screen on console 4?
<Foske> easy: opened from console 1, so return to console 1 ?
<Foske> err
<Foske> hmzz
<philbo_> Foske: righ. But what about apps run remotely?
<bughunter> skids: You mean, to display a (text) menu with ALT-ESC as like as Novell Netware does with CTRL+ESC?
<Foske> well, I assume the login was displayed before on the display...
<skids> I think the problem is that we haven't even considered the basics of multihead console switching, nevermind text vs graphics.
<nsouch> skids: you don't have an xterm for every X appli...
<skids> nsouch: true, but that's a UI decision.  I think the above gives a natural "multiple DOS 6.2 boxes" feel.
<skids> s/2/22/
<Foske> I think, go back to whatever was displayed before, will do it
<philbo_> How bout going back to where the app was started from and if there is no such device then just go back to the first device on the display (which would be the first console). Arbitrary choice seems better than no device being mapped whatsoever (especially since this cases is unlikely, who needs to run graphical applications remotely)
<skids> bughunter: no, alt-escape would go to text from graphics, or from text to graphics if there was a graphics app running in that slot.
<nsouch> what is text if no text mode support by the board?
<skids> philbo: Well, if you're going to do it that way, you probably should just go back to the last text VC explicitly requested.
<Foske> if whatever displayed before doesn;t exist, go to related console. if related console doesn;t exist, display last console mapped to that device. If no consoles mapped to the device display nothing or a KGI logo
<cow> is that what i mean by (asummed there is vt, that is)  how to trap openvt -s <num> -- logout 
<skids> nsouch: if no text mode is supported by the board, then naturally the app must have not been started from a vc on the board so...
<ortalo> ... KGI logo.
π skids moves to break this topic out into a committee -- let's rope some random unsuspecting users in some discussion group somewhere into arguing about it.
<nsouch> ortalo: text or graphic? :p
<philbo_> skids: you think so? For example currently when x crashes it throws you back to where it was started form no matter which vt you were on most recently. Seems pretty intuitive to me.
<Foske> if a board supports no consoles, it switches back to the previous graphic mode set, if no such mode (no graphic consoles left open on that display), power management seems a good option :)
<cow> we're hanging in the void for that case, currently as the kbd handler has no focus or the like
<skids> philbo: Actually I find that more annoying than intuitive, like when I kill X from the command line and it chucks me to another VT.
<philbo_> cow: I'm not quite sure about what would that do. I suppose I should experiment with that
<Foske> skids: you forget X has no focus then !
<skids> Foske: ?
<Foske> you kill ANOTHER console, so nothing should happen if that maps to the same display
<philbo_> skids: hrm good point.
<Foske> another (graphical) console
<cow> philbo, i experimented with that one a while ago and as long as we do not have a 'global' active kbd handler we probably should fallback to the last (whatever this might be) focus
<ortalo> It seems to me there are pro and cons to every behavior. But, globablly, the thing that emerges, is to go back to the last known mode on the head.
<Foske> if (has no focus(killed_display)) do nothing
<Foske> or something
<Foske> err if (not displayed())
<skids> Shouldn't the console system be a loadable module itself anyway?  Like so you can choose your flavor?
<nsouch> maybe the strategy should be configurable
<cow> philbo, i'd be interrested to help in handling that case, though. it's an interresting problem, or design problem if you like
π ortalo checks why the baby is angry.
<philbo_> cow: well, I have no idea about the issues involved here (and I suspect neither has anyone else here besides you) so lets defer that till more of us gather some information about the problem
<skids> There's no reason not to have it N ways.
<nsouch> among static rules of course
<cow> philbo, k
<Foske> yeah ! have it N ways ! so noone can work on somebody elses computer !
<Foske> :)
<Foske> anyway, somebody wanting to volunteer to check this out ?
<philbo_> ortalo: last known mode requires an arbitrarily large stack of 'previous' as they can disappear
<nsouch> set -o vi and see what happens!
<Foske> I guess the problem is clear
<cow> so what about the logo thingy?
<skids> What's the easiest one to implement in the short term?
<Foske> cow: is nice, though DPMS power management is a nice one too.
<philbo_> Foske: I can take it as I have pretty good idea where it would go
<Foske> philbo: you are not overloading your todo list ?
<cow> Foske, philbo? nah, he never would :P
<Foske> :)
<Foske> okay then
<philbo_> Foske: no no, most of the things I volunteered for are simple fixes once agreed on. (except for the crt stuff that is)
<Foske> oki
<philbo_> cow: you want a new logo?
<Foske> this one is easy too (except for the rare non-console cases)
<cow> skids, what exactly were you thinking of (logo-wise, iiuc)
<Foske> name noted.
<Foske> SMP issues and fast_ functions
<cow> philbo, skids seems to
<Foske> my favourite :)
<skids> cow: well, "The Right Thing To Do" is a bit preachy IMO, but mainly, s/GGI/KGI/
<philbo_> skids: we might want to put a smiley there
<philbo_> Foske: mine as well
<Foske> okay. as you all might have read on the mailinglist, I fixed SMP related issues by removing our own code, and replacing it by official kernel code
<cow> philbo, that'd be proper, yes
<skids> I have always been in favor of a big orange "It is now safe to turn *ON* your computer"
<Foske> not everything is set now, but basic SMP support should work.
<skids> But that should wait until we have high security/stability.
<Foske> It becomes very clear to me that we have always ignored the need of locking
<philbo_> I propose removing the fast_ functions. They are old hard to maintain and we don't really get much benefit from them
<nsouch> shouldn't we start with a giant lock?
<nsouch> then reduce the grain
<Foske> philbo: I agree, though we shouldn;t ignore ortalos remarks regarding the accel
<cow> skids, so.. want to remove the kernel-config option for now until we settle on a new logo as it is likely that no new users will be interrested to debug eraly boot?
<bughunter> nsouch: like (re)introducing the "Big Kernel Lock" ?
<philbo_> Foske: the source code for remap_page_range clearly shows that it is safe to use them no matter what the book says
<nsouch> philbo: yes and have arch abstraction in VM management
<Foske> nsouch: we should lock every bit of code that accesses registers
<philbo_> Foske: safe in the sense that they do the same thing as the fast_ version
<Foske> philbo: ok, but it doesn't explain the memory leak
<nsouch> somehow
<skids> cow: Yeah the real reason for the logo was to slow down to read boot messages.  Since the boot driver no longer seems to need debugging, it could probably just be removed and later we'll do some sort of logo like the fbdev pengiun.
<njs> having a logo is useful if only so it's immediately obvious that your kernel patch has succeeded...
<Foske> I will start to work out locking abstraction
<cow> skids, k. i'll simply drop the menuconfig option for now
<nsouch> skids: thanks for the info, I love historical reasons
<philbo_> nsouch: I was meaning to have a talk with you about what exactly is needed now that I'm toying with splitting /dev/graphic but I suppose that should probably be done outside this meeting
<Foske> please keep things together guys
<ortalo> I think we should really do more attempts to use the native remap_page_range() functions.
<Foske> ortalo: sorry ? we do it already now ?
<nsouch> hard, I think. graphic is *very* OS dependent, first because of the unix API (open, ioctl, mmap...)
<philbo_> Foske, ortalo, philbo agree on removal, cow doesn't care either way.
<ortalo> But (changing the way we) playing with the VM is always touchy.
<skids> We should kill them for now, and concentrate any effort along these lines, if any is needed, on the BSD and Linux 2.5 VM.
<nsouch> Arch independency and OS independency shall be addresses in parallel
<cow> .... fast_ .. fwiw, as said before ok with me to drop, although i do not see an advantage. otoh it probably would be well received to reuse existing (but sometimes suboptimal) infrastruc
<Foske> I'm willing to look on the locking, but if someone else could track the leaks ?
<philbo_> nsouch: right. Well /dev/graphic is just one of possible mappers. But anyways. I'll email you about all my ideas so that you can tell me what would help the FreeBSD port.
<Foske> might be Gx00 related
<ortalo> I can try to locate these leaks. (As soon as I can reproduce the thing.)
<Foske> oki
<nsouch> Foske: once my Tyan bi-AMD has CPU and memory ;)
π skids won't volunteer for any heavy kernel work -- 2 SCSI controller BIOSes serving lots of devices take > 1 minute
<cow> Foske, can you quickly descibe an easy way to reproduce/observe 'em?
<nsouch> philbo: ok
<Foske> nsouch: thanks, will assign it to ortalo for now
<philbo_> So I take it we are agreed on removing fast_ functions.
<ortalo> At least we should try to remove them.
<cow> philbo, well, looks like
<Foske> cow: my setup : SMP kernel, Gx00 (G400 AGP) display=1, top on a console on display=0, accel demo running full speed on ALTGR-F5
<Foske> and see the memory counter growing
<cow> Foske, k
<philbo_> Foske: for kernel or for the accel demo?
<Foske> not tested wheter it is SMP or Gx00 specific
<Foske> for the kernel mem, accel stays fine
<Foske> accel demo
<ortalo> Can you send me the offending program (unless it is one of the LibGGI programs)?
<Foske> ortalo: abused libggi/programs/demos/demo
<Foske> removed the 3 seconds check on the random box drawing
<bughunter> foSke: I thought, you used the stars demo?
<Foske> bughunter: wasn't sure that one was accellerated
<Foske> okay...
<cow> fine. next proposed point or point in agenda is ?
<Foske> CONFIG_INPUT
<Foske> philbo ?
<Foske> what about it ?
<bughunter> foSke: Just guessed, because you said again and again: "I saw the stars" :)
<philbo_> I have a fix that makes sure kgi doesn't use kii/keysyms.h (leaves them for userspace0
<philbo_> Do people think this is a good way to go?
<cow> something we should put in HEAD right after the having tagged?
<philbo_> I suppose use of all the K_ stuff is very specific
<skids> Every time I look at KII I get depressed, so don't look to me for solutions.
<philbo_> nsouch: do you have any opinions about how linux specific kii is?
<skids> We need K_ syms as long as we have our own console implementation, and as a result, we have this huge set of #defines that varies from OS to OS.
<cow> skids, :) disgusting it really is indeed
π ortalo thinks that this baby really wants to use ggiPutBox()!
<nsouch> bughunter: ah! smoking while hacking... :)
<nsouch> philbo: it's not
<Foske> so, removing it is not an option ?
π bughunter is a militant non-smoker
<nsouch> I've ported KII + written input drivers and a device for FreeBSD console
<skids> bughunter: militant?
<nsouch> starts working except that console switching is not yet managed by KII
<Foske> i.e this entire thing is a non-issue, besides that KII needs a cleanup :)
<cow> Foske, yes, i think it's not. we should rather look at something like a "console-stackker" mid- or rather long-term, imho
<philbo_> ok. let's move on then.
π Foske hears someone whispering about long-term
<Foske> great...
<Foske> one issue not on the agenda:
<nsouch> skids: why so? KII is not that bad.
<bughunter> skids: s/militant/unyieldingly/ :)
<Foske> VT switching causes Accel deadlock. At least on SMP systems with the Gx00 accellerator, though I think it is a design flaw
<skids> bughunter: As long as you keep your militant tendencies to yourself I guess that's OK.
<philbo_> Foske: do you know the cause?
<Foske> seems not to be solved with locking, is a race: cpu 1 assumes something still to come while CPU 2 has passed it
<Foske> wait_idle in the graph_accel_nomap (iirc) waits forever
<skids> nsouch: I think we are trying to do too much with KII.  I'd prefer to see the OS mainstream decide on their console system, and if they pick a lame one, they suffer.
<ortalo> So the "wake_up()" does not go though.
<Foske> ortalo: maybe an issue for you ? you got SMP and are known with the accel code ?
<ortalo> Are you sure that the buffer was indeed executed and that you got the SOFTRAP end-of-buffer IRQ?
<nsouch> but KGI must know about special keys (switching at least)
ωνω scanlime [~micah@aden2-42-dhcp.resnet.Colorado.EDU] has joined #kgi
<ortalo> The problem is that I do not have SMP hardware, so maybe I will not reproduce the bug.
<ortalo> But if I can reproduce it, yes I can try to track it down.
<Foske> it is perfectly reproducable for me, just switch away and back
ωνω SignOff: scanlime (Client Quit)
<Foske> it might occur on single CPU too
<Foske> never checked it though
ωνω scanlime [~micah@aden2-42-dhcp.resnet.Colorado.EDU] has joined #kgi
<Foske> ok. please let me know if you need help
<Foske> now...
<Foske> the big issues
<Foske> AGP support
π Foske shuts up wisely
<skids> nsouch: If we ship it as is.  We could also just ship a KGI that has an in-kernel API, and then as a separate project console systems could be hooked in to use as much of the KGI API as their design limits them to.
π bughunter made already his statements about bus space abstraction... :)
<skids> I think most people view AGP-GART, PCI-GART and other DMA stuff as
<skids> being "for accel".  There are more uses, and I consider accel FIFO
<skids> itself to be perhaps the least important:  My list:
<skids> 1) Textures
<skids> 2) Vector lists
<skids> 3) various LUTs
<skids> 4) Accel FIFO
<ortalo> skids: agreed
<Foske> Okay, what is new with AGP-GART ? or is it just yet another bus system ?
ωνω SignOff: philbo (Ping timeout: 14400 seconds)
<nsouch> skids: right. But do OSes have better console than KII? NetBSD is supposed to AFAIK.
ωνω philbo_ is now known as philbo
<skids> Note that 1) and 3) never need to be mapped out (except for focus 
<skids> changes) even when they are committed, and with proper driver coding we 
<skids> can make it so that 2) never needs to be mapped out.
<philbo> indeed. There are two separate issues here. How to use it in kernel and how to expose it to userspace. I suggest we start by discussing how to use it in kernel.
<Foske> are we there with bus abstraction ?
<skids> nsouch: whether theirs is better or not is not the point.  The point is that KGI has a boundary, and it's the mainstream developers (or sidestream devels) that are responsible for taking advatage of what KGI has to offer.
<ortalo> 0) Pictures (putbox)
<bughunter> nsouch: and openbsd, too...
<philbo> skids: wrt kii, how about we strive to make kii just another one of the possible console layers?
<ortalo> Foske: AGP also has another specific translation table...
<skids> philbo: works for me.
<Foske> guys, can we leave KII now  please ?
<nsouch> of course, they share lot of code.
<skids> ortalo: I was considering putbox to be texture
<philbo> Foske: done.
<ortalo> IMO, in-kernel, AGP raises the problem of "graphic-capable" buffers.
π bughunter wonders, how to access busses (agp, pci) from kgi driver side.
<bughunter> ... because there are two cases to take over:
<bughunter> a) the driver finds the card by searching through the bus
<bughunter> b) the bus driver finds the card and loads the driver
<bughunter> AFAIK, b) is the *BSD way.
<philbo> bughunter: that's not very relevant to agp
<Foske> a) is no case, it is on top of b)
<cow> ~bughunter, non-issue. is (will be) abstracted in drv/display/system/whatever/system
<bughunter> cow: ok.
<nsouch> but that's relevent to arch/OS independency (which is everywhere :)
<philbo> what we need to figure out is where/what sets up the gart, how is the driver notified about it and how is this memory managed (be it for accel buffers or to expose for userspace)
<nsouch> We can't support a new bus with addressing arch issues.
<Foske> -the detection system should be removed from the chipset driver, wich is a part of the bus abstraction issue, which might solve some AGP issues as well
<skids> I would say that AGP buffers should be mmapped above the VRAM on /dev/accel, even if they are textures.  When the mmap happens, OS facilities for allocating the space are invoked, and if successful, the mmap is successful... is that simple enough?
<ortalo> We need some management functions in-kernel so that a driver can check that some memory area referenced in the accel FIFO refers really to some "KGI graphic buffer" and extract the characteristic of the area (AGP capable or not, DMA, etc.)
<cow> real question is about the silly impl details involved with it or rather policy
<nsouch> Foske: Ack.
<bughunter> nsouch: I like NetBSD's bus and DMA abstraction layer.
<Foske> so maybe buggyhunter wasn't so wrong at all
<Foske> maybe we should implement bus abstraction first before we deal with AGP  issues
<ortalo> Foske: AGP is not the only issue there!
<cow> skids, too fast for me but does sound simple enough for me at a first read
<Foske> and as buggyhunt likes it, I also declare him the volunteer to do that
<cow> hm
<ortalo> Foske: currently, even via regular PCI accesses, we do not know in KGI how to use in-host textures...
<skids> Maybe we should just start with a kgi_agp_* set of functions which implement the least common denominator of the immediately available OS facilities.  Then, someday when we are sprucing things up, we can change that API to be a bus abstraction layer.
<Foske> ortalo: so true, this sounds more and more as a need of an abstraction layer
<bughunter> links to NetBSD's bus/dma abstraction layer are available at http://kgi-wip.sourceforge.net/documentation.html
<bughunter> Does everyone agree, when we use this API as is?
<Foske> skids: you the agp code, buggyhunt the bus abstraction ? :)
<nsouch> bughunter: Anyway, prototyping AGP does not need full x86 independency
<nsouch> bughunter: I expect a lot from a future NetBSD port for Arch issues...
<cow> philbo, a gart resource is nothing more than a resource. a drv does not (?) need to be aware of type, shuold it?
<Foske> bughunter: might be nice to use it, saves a lot of efford on bsd systems
<skids> If we do go for a bus abstraction during the first pass, then we should not try to make it work for anything but AGP.  Once it works for AGP, we let it be.  I don't want to see us side-tracked into become also the "KBI Project"
<bughunter> nsouch: How much does NetBSD's API differ from FreeBSD's one?
<philbo> cow: a driver's resrouce? Is it the card driver that sets up the gart?
<nsouch> bughunter: not much USB, ISDN, sound systems are shared with compile conditions.
<skids> The card driver should only need to request GART regions from the kernel and poke a register or two.
<cow> skids, a bus abstraction naturally has to be bus agnostic, so i don't see your point in KBI at all? please explain
<bughunter> skids: Once a guy comes up, who wanna port KGI to the sparc architecture.... On sparc, there's no AGP nor PCI.
<skids> Suppose we decide we want a "bus abstraction", and we go implement KGI for an OS that doesn't have one.  We should NOT spend time making the back end of buses we won;t ever use.
<bughunter> skids: sparc has its own bus: SBUS. And UPA for the graphic board.
<philbo> skids: so the driver would during init setup the gart using kgi_apg_ functions, setup its own registers and then export the agp memory as another mmio region?
<nsouch> Actually, I started with FreeBSD because I know it quite well, but NetBSD is the best target for lots of reasons
<cow> philbo, well right, not a driver resource but a resource used by the driver. still a bus abstracted resource used by the driver
<skids> philbo: More like during mmap than during init.
π cow starts to get headache being reminded of the issues involved
<philbo> skids: you can mmap only already available resources
<skids> philbo: and during vc switch.
<ortalo> I think the driver does not need to be involved into the mmap and export to userspace.
<nsouch> NetBSD VM has numerous improvements over Mach, valuable for KGI.
<ortalo> KGI can do this directly per-se, without driver intervention.
<skids> philbo: what consititutes an "available" resource?  Doing anything other than on-demand allocation of AGP RAM won't fly.
<nsouch> ortalo: should the GART be handled has an other tlb?
<bughunter> nsouch: OpenBSD implements NetBSD's UVM, btw.
<ortalo> Afterwards, when the AGP (or regular PCI) memory areas get used. The driver will need some info about them.
<cow> philbo, /mmio region/resource/ yes, no?
<ortalo> nsouch: I don't know in fact.
<philbo> cow: mmio resource yes
<bughunter> nsouch: Does FreeBSD also implements NetBSD's UVM? Or is it still based on 4.4BSD/Mach VM?
<philbo> ortalo: can you use agp witout ever telling the driver about it?
<skids> bughunter: OK, so we change the prefix for kgi_agp_* to kgi_somethingelse_*  Still, I don't want to become the KBI Project.
<ortalo> philbo: no, but the driver only wants to know if ONE bit should be set or not set.
<Foske> maybe some discussion on the mailinglist should be involved in this before we can settle it. we're mow comparing this os to that os, and my conclusion is simply that the differences are big enough to show the need for some abstraction
<nsouch> bughunter: no, unfortunately. FreeBSD chose the stability.
<bughunter> nsouch: NetBSD, too. :)
<philbo> ortalo: doesn't it need to know about where and how much of agp memory there is?
<ortalo> Foske: agreed.
<nsouch> bughunter: I did not mean the opposite :)
<Foske> maybe bughunter can show us a little what the implications are
<Foske> by mail
<Foske> and I guess not everyone has read the docs well, for they were mostly just dumped on the website without comment
<ortalo> philbo: that's the other way round: the driver sees a request to tranfer some memory area. He wants to check if this is AGP or "correct" memory, to setup the hardware transfer.
<cow> philbo, i think it doesn't. if it is else it isn't
<philbo> ok. Let's leave it for an email discussion as it isn't pressing and it would be beneficial to have long pauses to think about issues involved
<skids> OK, onto how AGP looks in userspace?
<philbo> cow: the Radeons for example have AGP_BASE and AGP_TOP registers for specifying region in the internal Radeon address space that should generate agp requests
<Foske> bughunter: could you please pull this heavy wagon ? At least initiate the discussion with some practical talking instead of "we should do bus abstraction" ?
<bughunter> foSke: I can give it a try.
<Foske> thanks
<Foske> any comments one cannot keep for himself now ? :)
<ortalo> I hate AGP.
<bughunter> foSke: First I must get the mach64/crt driver combination get to work in order to have a stable base to work on.
<skids> lol.
<bughunter> ortalo: :)
<cow> philbo, so it is using a resource which happens to call a callback in the worst (but common) case. i still do not grok it rightly, i guess
<cow> Foske, none. move on :P
<bughunter> foSke: Though, my PC has no AGP. So for AGP support, I need assistance.
<Foske> okay. someone else that starts the agp code in the mean time ?
<philbo> cow: I suppose it's all just anoying implementation issues....
<skids> bunhunter: ATI cards have a GART for PCI built in.
<ortalo> I really think we should focuss on ggiPutBox() before trying to do it via AGP.
<Foske> I assume buggyhunt can use assistance on the bus stuff
<Foske> oki
<cow> philbo, probably. real world always sucks :P
<skids> ortalo: what do you mean?
<Foske> agp skipped till the bus abstraction basics are there
<Foske> next subject
<Foske> ggiPutBox ?
<ortalo> I mean: sending data from host memory to the framebuffer using the accel engine.
<skids> Uhuh, not that easy, userspace buffers were deemed to be a different subject, so now I want to talk about those.
<Foske> ah, ok
π cow goes for a ten minute brk
<Foske> 10 minute pee break ?
<Foske> ok
<skids> ortalo: Versus what, I thought that was what we were talkinga bout/
<cow> Foske, if you feel like, yes :)
<cow> 
<skids> peeeeeesa 10
<Foske> XX:55 we will continue
<bughunter> !sleep 5
<bughunter> :)
π philbo could use 10 minute break. Big issues are yet ahead
<bughunter> !time
<ortalo> OK for the break.
<bughunter> <f00f> It is 0:49 CET :)
<ortalo> Yes. Me too.
<nsouch> :)
<Foske> my freenode server says 02:46 am
π Foske notes nsouch' todo list is still empty :-P
<nsouch> ...
<nsouch> still have lot of dip (debug in progress) :)
<bughunter> foSke: testuser_'s, anaki's, ekix's and golbez's todo lists are also empty... :)
<bughunter> foSke: same for njs, neiljp, mitchell_, fraggle, oxygene, popel and scanlime :)
<Foske> yeah, but for the three first we should be happy now if they are willing to test kgi :)
<bughunter> foSke: yes... :)
π Foske invites all named users to wake up :)
π bughunter sends pings
<njs> At this level of abstraciton I'm just a spectator :-)
ωνω [Users(#kgi:18)] 
[ scanlime  ] [ neiljp    ] [ oxygene   ] [ fraggle   ] [ njs       ] 
[ nsouch    ] [ ortalo    ] [ anaki     ] [ testuser_ ] [ philbo    ] 
[ mitchell_ ] [ Foske     ] [ ekix      ] [ popel     ] [ bughunter ] 
[ golbez    ] [ skids     ] [ cow       ] 
<Foske> we never were so crowded here :)
<bughunter> 18 users here.
<bughunter> the record on #ggi was 14 or 15...
<neiljp> bughunter: ho ho ho :)
<Foske> njs: that's ok :) what OS/Hardware do you use ?
<nsouch> bus-abstraction is not a subject anymore, or bunghunter want's to continue the demonstration? :)
<njs> Foske: linux, dual x86, G400
<Foske> oh great ! 
<njs> Foske: but I'm not sure I can actually do much testing; my kernel setup is a bit touchy right now.
<Foske> njs: that must be the best supported platform at the moment (besides the SMP issues we discussed earlier)
π neiljp wonders about support for rage128
<bughunter> neiljp: you wanna have the docs for the rage128 cards?
π Foske points to the G Bush side of the Atlantic.... those guys seem to know more about that
<Foske> 2 minutes before meeting time
<neiljp> bughunter: the docs are available? not that I'd understand a word of them, but...
<bughunter> neiljp: philbo, golbez and I have them.
<Foske> buggy: I can donate you a Rage 128 :-P
<bughunter> neiljp: I have the docs on a CD, which is at home... so I haven't it at hand right now.
<nsouch> a new item for philbo's TODO list then.
<bughunter> foSke: Is it PCI?
<Foske> yup
<bughunter> foSke: great.
<skids> Your pee is ready (to be flushed)
<Foske> hunty: mail me your address
π philbo would like to write the rage128 driver but time is lacking
<Foske> oki... ortalo ?
<neiljp> philbo: cool :) apart from the lack of time ;)
<bughunter> foSke: ok
<Foske> next subject: vt_switching is based on kii_devices... i.e. if you open the wrong (or no) /dev/event, things go wrong
<cow> ------------------------------------------------------------
<Foske> =S
<skids> Uhuh, next subject is userspace accel buffers.
<Foske> oh ?
<njs> what are userspace accel buffers?
<cow> Foske, indeed
<skids> The second half of the AGP discussion.
<Foske> sorry, missed that one
<cow> Foske we urgently have to settle those 
<Foske> njs: the possability for an outside-kernel piece of code to accellerate graphics full speed by having access to the accellerator unit
<cow> thought / quick intros?
<skids> cow: of people, or topic?
<philbo> skids: could we move that to the mailing list as well? I think the same applies (not as pressing and people need to make themselves a good idea of what the issues are)
<Foske> ok:) skipped !
<cow> skids, people always are void. only topic is real 
<skids> Hrm, well I can reduce the discussion to this point and continue on the mailing list:
<skids> I'd really like to see an mmap control page set for controlling 
<skids> the accel so the other CPU can grab a finished buffer on SMP systems
<skids> w/o the context switch.  Also this pertains to certain types of vsync stuff,
<skids> but I'll wait till that topic for that part.
<Foske> skids will introduce this to the mailing list
<bughunter> nsouch: AFAIK, you said, FreeBSD has addressed the VM issues to allow access to hw resources from userspace. Is that right? If yes, can you elaborate on them, please?
<Foske> now, next subject ?
<cow> foske, useles. just paste a strip to the list with names omitted if you feel the list to be involved
<Foske> ?
<skids> Re: vt switching then... what gets restored?
<philbo> skids: wait, that's the next one
<skids> Oh, sorry.
<skids> RIght, /dev/event.
<cow> so how does that one look like at a glance. write only ping read only pong i guess? sane counter-example?
<nsouch> bughunter: yes... trying to find a starting point.
<Foske> err
<Foske> ELOST
ωνω SignOff: ortalo (Read error: 110 (Connection timed out))
<skids> I won't be annoying and point out that this problem is just another result of KII.  Oops. I guess I just did.
<philbo> Basically, I can't think of a good solution to the /dev/event+vt swithing problem. Suggestions are welcome.
π skids hides.
<nsouch> bunghunter: in terms of differences with Linux graphic mapper implementation?
<Foske> okay, skids volunteers to rewrite KII :) NEXT :-P
<bughunter> nsouch: yes.
<bughunter> foSke: shouldn't we wait until ortalo is back? :)
<nsouch> Foske: skids is willing to rip KII, not rewrite it.
<Foske> oh
<philbo> ok, well I suppose people aren't very familiar with the issue. Moving to mailing list with ample background information.
<skids> ortalo must have prostate problems, to pee so long :-)
<Foske> almost the same 
<Foske> good idea
<bughunter> skids: maybe his baby makes some noices now... :)
<Foske> think the next subject is actually discussable... :)
<nsouch> s/baby/babies
<philbo> next topic: can libggi solve all of our vt swithchin/restoring issues?
<cow> a shared one sounds dangerous to me, personally. urgently needed but odd to my untrained mind
<bughunter> philbo: IMO, this is a target issue of libggi.
<skids> Umm, I think there are some things that KGI should restore beyond mode...
<philbo> bughunter: does libggi have a way of telling the app that something happened and it should probably redraw?
π Foske still doesn't see the reason for background buffers :)
<nsouch> bughunter: most of the differences stand in the fact that there's no per process data in the vnode system and
<skids> philbo: GII has expose events.
<skids> philbo: and UNIX has sigwinch.
<philbo> skids: ok. Is that enough?
<Foske> if kgi sends sigwinch, we're there :)
<bughunter> philbo: Have you read the last mails from the GGI ML (the ones from the heating discussion)
<nsouch> bughunter: for a given vnode, the VM management is centralized by pagers.
<cow> nsouch, and?
<Foske> the "I hate amiga kiddies by default" one :)
ωνω ortalo [ortalo@pppport15.laas.fr] has joined #kgi
<Foske> wb ortalo
<skids> Can we get agreement that any data in VRAM is definitely NOT preserved by KGI? 
<Foske> ortalo: vt switching based on event: moved to mailng list. topic: what to restore on vt switch
<philbo> bughunter: well, that one wasn't all that constructive. I think people here have a better understanding of kgi and the complexity of implementation details
<nsouch> bughunter: thus difficult to distinguinsh two different mappings of different processes when time comes to handle faults.
<philbo> skids: Sounds reasonable to me
<Foske> skids: I agree there, if an app is slow it should draw in RAM instead of vram
<Foske> then it can continue to draw when moved to the background
<ortalo> skids: sounds ok to me too. except maybe some very special cases (like cursor shape if stored in VRAM).
<cow> skids, in my simple-minded mind it is not, right.
<skids> ortalo: I think the text vc system should maybe have a cursor shape stored, but I'm not too sure about graphics apps.
<philbo> ortalo: sounds hard. I don't think it's unreasonable to ask the app to restore it. Console does it.
<Foske> mwaah.. graphic apps just should restore everything
<skids> It makes it a lot simpler for our first few releases if we know we never have to protect anything in VRAM from another process.
<bughunter> nsouch: I think, you told that on the KGI ML... Am I right?
<nsouch> bughunter: I did.
<bughunter> nsouch: ok
<Foske> ok. so kgi should send a signal when a app should redraw (App gets sigcont already, by the way)
<philbo> so: everything is assumed lost on a vt switch. libggi provides a good interface for apps to react to such event. Anything to add?
<Foske> I will take care of the signalling
<skids> Well, I'm not so sure about graphics context.
<philbo> skids: you mean the accelerator context? That one is per mapping and is preserved.
<skids> Including things like texture LUTs?
<cow> that one is tricky and furthermore dangerous, yeah.
<philbo> skids: but I guess you're getting to the question of what happens if your accel buffers are in agp space...
<skids> philbo: No I was saving that one to whollop people over the head later :-)
<Foske> philbo: that requires decent handling of the signals...
<Foske> won't be easy, but must be done
<skids> The problem is, GPU contexts are getting bigger and bigger.
<Foske> so less and less reasons to keep things in back buffers ;)
<skids> (as in, non-VRAM register values).
<skids> OK, so we are then agreed that the app needs to restore GPU context?
<Foske> don't forget: switching away an applicatin that utilizes 128 MB video mem is not a MUST for the user, it is a CAN DO
<Foske> from KGI
<bughunter> skids: GPU context switching is not a problem on highend cards.
<philbo> skids: right, though I don't think I have a good idea about the exact scale of the problem
<skids> Well, yes, I am kinda hiding the "but then"... here goes "but then the accel pipe cannot resume execution until the app's GPU reload is done."
<philbo> skids: yes, I think gpu context is preserved. KGI was built around that assumption and it is just too hard otherwise. We'll deal with practical problems when we encounter them.
<skids> And since the app may be reloading the GPU using the accel pipe....
<Foske> skids: hey, how many times a sec do you swap away heavy graphic apps ?
<Foske> anyway
<skids> Foske: It's not the performance, it's the amount of kernel-side code to maintain/debug.
<Foske> I'll take care of the signals, and it's up to the ggi guys to deal with it. (volunteers ?)
<Foske> I'll take care of sending the signals that is
<skids> Foske: luckily, the trend is *away* from write-only registers, aliased registers and such, but the register load/reload can end up being a pretty big (and thus bug-infested) section of code.
<Foske> skids: I never said supporting swapping away accellerators was going to be easy :)
<Foske> next subject....
<skids> Foske: I'd prefer we do, I just want to make sure everyone knows the implications before agreeing to it.
<Foske> synchronisation of accelleration: is polling /dev/kgi/device0/accel the best ?
<skids> Foske: I'll take care of GII issuing an expose event.
<Foske> skids: good, though you should also catch the sigttou and sigttin
<philbo> we *need* synchronization. As far as I understand things, that's the best solution so far. Any suggestions?
<Foske> everyone still here ???
<ortalo> yes
<bughunter> yes
<ortalo> though sleeping a little... :-)
π bughunter expected some more "yes" :)
<skids> philbo: Mostly we *need* to be able to queue certain commands for execution during vsync.
<Foske> huh :)
<skids> The rest is gravy.
<philbo> skids: ugh. That a whole other can of worms
<Foske> mjammy, worms...
<skids> I volunteer to add the API to LibGGIMISC for issuing flip-on-retrace and such.
<Foske> ok
<Foske> noted:)
<Foske> back to the isse
<Foske> issue
<philbo> well, before people start falling asleep on the old continent, lets move to splitting /dev/graphic
<ortalo> Apparently, FreeBSD needs this (IIUC).
<Foske> :)
<Foske> oki
<philbo> Are people opposed to the idea? Anybody feels it is useless waste of major numbers?
<ortalo> Maybe it is not so urgent under Linux?
<skids> I'm getting the impression that we are too tied to the fd's somehow, and we need (don't say it, no!!!) and abstraction layer.
<bughunter> philbo: I guess, Linus thinks so.
<Foske> wasting majors will be a reason to decline KGI once mores
<nsouch> ortalo: yes, this was the conclusion on the ML
<ortalo> It's not the major numbers that worry me, it is more the additional code for new device types in Linux.
<Foske> this works for Linux, that works for BSD....
<njs> does devfs make matters better or worse?
<bughunter> skids: good point. :)
<Foske> njs: neighter
<philbo> ortalo: it is hard to wait for an accel to go idle if you don't have a fd for each accel to wait on
<Foske> njs: it prevents you from wasting minors, though not majors
<skids> I think we should use devfs when available but not require it.
<nsouch> I progressed on the FreeBSD side and a new mapper command is used for accessing a particular device from a /dev/graphic
<Foske> 16 bit majors will solve the issue for us
<nsouch> An attach command that differenciate the graphic minor from the device number.
<Foske> iirc that is linux 2.5 code
<skids> We should be concentrating on 2.5 and on as far as Linux is concerned IMO.
<nsouch> KGIC_MAPPER_ATTACH, with a device_id as parameter
<Foske> skids: for the wip branch yes, for the stable branch no
<cow> i'm not sure we need (additional) majors. since we (seem to be freed) from pressure by minors we could push one level and do away with only one (or two for conveniance) majors and a shifted minor for non-accel, acce.
<nsouch> This trick avoids the /dev/graphic breakage for now.
<skids> Foske: sure, but for the stable branch any kludge that works is fair game IMO.
<Foske> cow: I think this issue doesn't count for linux right now. it works there, so please keep the stable tree this way
<bughunter> nsouch: For completeness, is there a KGIC_MAPPER_DETACH, too ?
<philbo> so there are at least two solutions for the major number contention. Hence splitting /dev/graphic is a good idea?
<cow> Foske, the stable is out of discussion fro my POV
<cow> mmmmmmmmm
<nsouch> bughunter: no, the close is responsible for the detach.
<Foske> into how many mayors ?
<philbo> graphic, accel, fb
<cow> /me's keyboard has a wackelkontakt :-/
<skids> philbo: I'd just cuation to try to keep the code that figures out what "thing" is being accessed from becoming completely entangled to the extent possible -- it may become an issue later.
<philbo> skids: very true. I'm trying to mirror the kgi interface there (only a single attach/detach pair, should be very clean)
<cow> skids, may but should not. yea
<cow> .....next?
<philbo> I got nothing. Anyone?
<skids> My brain is fried.
<nsouch> VGA driver?
<Foske> mine too
<Foske> ?
<Foske> what about it ?
π cow is devastated
<nsouch> It's still broken, no?
<ortalo> Maybe we should refrain from splitting /dev/graphic too early then, no?
<nsouch> yes.
<ortalo> Who works on the VGA driver?
<philbo> ortalo: I'm working on a sample implementation. If people disagree, I'm perfectly willing to throw it away.
<bughunter> anyone feeling able to make a (pre-) summary of what we have discussed?
<cow> nsouch vga-text is in cvs. pόlease try it out and get back to me or the list iff problems arise (apart from absent features which you ought to implenment()
<Foske> bughunter: i'm about to sleep now, gf is waiting
<nsouch> cow: ok
π Foske misses 3d accel in the text driver
<philbo> Foske: are you going to write up a summary? (later)
<Foske> tomorrow
<ortalo> philbo: I guess it will be useful. Maybe it's something that will re-appear soon. But it changes the way we were used to look at KGI devices...
<Foske> it might appear in FreeBSD soon, and in Linux later
<nsouch> If no other solution found in the middle.
<philbo> ortalo: yeah, I know. I think it is worthwhile to have something working so that people can see what it does to the code and make a better judgement of whether it is a good idea or not
<philbo> ortalo: I'm not fully convinced myself, hence my willingness to throw it away when I'm done and it doesn't satisfy my desires
<cow> nsouch, i did not forget about the FreeBSD integration, but that one may take some time. i don't have it locally, so playing with it is cumbersome, thus time-intensive. i'm sure you see my point.
<Foske> okay..
<Foske> I'm off to sleep now, log will continue to run, don't talk too much, only got 223 MB left :)
<philbo> good night Foske
<nsouch> cow: I do.
<Foske> summary will follow soon
<ortalo> I guess I need some sleep too now.
<cow> i do too
<ortalo> If you don't mind, I'd rather say you good bye now... :-)
π philbo declares the meeting over.
<cow> pleased to have met you all. see you    ..
<ortalo> (Have to install FreeBSD 5.0 tomorrow... :θ)
<ortalo> see you. and good night when (where) applicable. :-)
<philbo> skids: do you have any agp links besides the agp specs? (getting ready for the discussion :-)
<philbo> good night cow, ortalo
π ortalo sneaks into Morpheus arms...
ωνω ortalo [ortalo@pppport15.laas.fr] has left #kgi 
<nsouch> bye guys. See you on the ML.
ωνω SignOff: nsouch ("*monkey grin*")
<bughunter> philbo: Have you already read http://netbsd.gw.com/cgi-bin/man-cgi/man?bus_space+9+NetBSD-current and http://netbsd.gw.com/cgi-bin/man-cgi/man?bus_dma+9+NetBSD-current ?
<philbo> will do.
ωνω bughunter is now known as bughunter_sleep
ωνω testuser_ is now known as testuser_is_awak
ωνω neiljp is now known as neiljp_offline
<skids> philbo: no, i don't even have the specs.
<skids> Tomorrow I'll probably resume reading through the linux source.
<philbo> skids: specs are at http://developer.intel.com/technology/agp/info.htm
<philbo> but they are not very useful from the software side
ωνω SignOff: neiljp_offline (Read error: 110 (Connection timed out))
π golbez stirs
π philbo goes to do some of the promised coding
ωνω SignOff: testuser_is_awak ("Client Exiting")
ωνω SignOff: skids (Remote closed the connection)
ωνω bughunter_sleep is now known as bughunter
IRC log ended Sun Feb  2 13:51:37 2003
